// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrappable_v3d.h"
#include "qlist_py_indexing.h"
#include "_LocationSimple__value_traits.pypp.hpp"
#include "QList_LocationSimple.pypp.hpp"

namespace bp = boost::python;

void register_QList_LocationSimple_class(){

    { //::QList< LocationSimple >
        typedef bp::class_< QList< LocationSimple > > QList_LocationSimple_exposer_t;
        QList_LocationSimple_exposer_t QList_LocationSimple_exposer = QList_LocationSimple_exposer_t( "QList_LocationSimple", bp::init< >() );
        bp::scope QList_LocationSimple_scope( QList_LocationSimple_exposer );
        { //::QList< LocationSimple >::const_iterator
            typedef bp::class_< QList< LocationSimple >::const_iterator > const_iterator_exposer_t;
            const_iterator_exposer_t const_iterator_exposer = const_iterator_exposer_t( "const_iterator", bp::init< >() );
            bp::scope const_iterator_scope( const_iterator_exposer );
            const_iterator_exposer.def( bp::init< QList< LocationSimple >::const_iterator const & >(( bp::arg("o") )) );
            const_iterator_exposer.def( bp::init< QList< LocationSimple >::iterator const & >(( bp::arg("o") )) );
            bp::implicitly_convertible< QList< LocationSimple >::iterator const &, QList< LocationSimple >::const_iterator >();
            const_iterator_exposer.def( bp::self != bp::self );
            const_iterator_exposer.def( bp::self + bp::other< int >() );
            const_iterator_exposer.def( bp::self += bp::other< int >() );
            const_iterator_exposer.def( bp::self - bp::other< int >() );
            const_iterator_exposer.def( bp::self - bp::self );
            const_iterator_exposer.def( bp::self -= bp::other< int >() );
            const_iterator_exposer.def( bp::self < bp::self );
            const_iterator_exposer.def( bp::self <= bp::self );
            const_iterator_exposer.def( bp::self == bp::self );
            const_iterator_exposer.def( bp::self > bp::self );
            const_iterator_exposer.def( bp::self >= bp::self );
            { //::QList< LocationSimple >::const_iterator::operator[]
            
                typedef ::LocationSimple const & ( ::QList< LocationSimple >::const_iterator::*__getitem___function_type )( int ) const;
                
                const_iterator_exposer.def( 
                    "__getitem__"
                    , __getitem___function_type( &::QList< LocationSimple >::const_iterator::operator[] )
                    , ( bp::arg("j") )
                    , bp::return_value_policy< bp::copy_const_reference >() );
            
            }
        }
        bp::class_< QList< LocationSimple >::iterator >( "iterator", bp::init< >() )    
            .def( bp::init< QList< LocationSimple >::iterator const & >(( bp::arg("o") )) )    
            .def( bp::self != bp::self )    
            .def( bp::self != bp::other< QList< LocationSimple >::const_iterator >() )    
            .def( bp::self + bp::other< int >() )    
            .def( bp::self += bp::other< int >() )    
            .def( bp::self - bp::other< int >() )    
            .def( bp::self - bp::self )    
            .def( bp::self -= bp::other< int >() )    
            .def( bp::self < bp::self )    
            .def( bp::self < bp::other< QList< LocationSimple >::const_iterator >() )    
            .def( bp::self <= bp::self )    
            .def( bp::self <= bp::other< QList< LocationSimple >::const_iterator >() )    
            .def( bp::self == bp::self )    
            .def( bp::self == bp::other< QList< LocationSimple >::const_iterator >() )    
            .def( bp::self > bp::self )    
            .def( bp::self > bp::other< QList< LocationSimple >::const_iterator >() )    
            .def( bp::self >= bp::self )    
            .def( bp::self >= bp::other< QList< LocationSimple >::const_iterator >() )    
            .def( 
                "__getitem__"
                , (::LocationSimple & ( ::QList<LocationSimple>::iterator::* )( int ) const)( &::QList< LocationSimple >::iterator::operator[] )
                , ( bp::arg("j") )
                , bp::return_internal_reference< >() );
        QList_LocationSimple_exposer.def( bp::init< QList< LocationSimple > const & >(( bp::arg("l") )) );
        { //::QList< LocationSimple >::append
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*append_function_type )( ::LocationSimple const & ) ;
            
            QList_LocationSimple_exposer.def( 
                "append"
                , append_function_type( &::QList< LocationSimple >::append )
                , ( bp::arg("t") ) );
        
        }
        { //::QList< LocationSimple >::append
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*append_function_type )( ::QList< LocationSimple > const & ) ;
            
            QList_LocationSimple_exposer.def( 
                "append"
                , append_function_type( &::QList< LocationSimple >::append )
                , ( bp::arg("t") ) );
        
        }
        { //::QList< LocationSimple >::at
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple const & ( exported_class_t::*at_function_type )( int ) const;
            
            QList_LocationSimple_exposer.def( 
                "at"
                , at_function_type( &::QList< LocationSimple >::at )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::QList< LocationSimple >::back
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple & ( exported_class_t::*back_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "back"
                , back_function_type( &::QList< LocationSimple >::back )
                , bp::return_internal_reference< >() );
        
        }
        { //::QList< LocationSimple >::back
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple const & ( exported_class_t::*back_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "back"
                , back_function_type( &::QList< LocationSimple >::back )
                , bp::return_internal_reference< >() );
        
        }
        { //::QList< LocationSimple >::begin
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::QList< LocationSimple >::iterator ( exported_class_t::*begin_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "begin"
                , begin_function_type( &::QList< LocationSimple >::begin ) );
        
        }
        { //::QList< LocationSimple >::begin
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::QList< LocationSimple >::const_iterator ( exported_class_t::*begin_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "begin"
                , begin_function_type( &::QList< LocationSimple >::begin ) );
        
        }
        { //::QList< LocationSimple >::clear
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "clear"
                , clear_function_type( &::QList< LocationSimple >::clear ) );
        
        }
        { //::QList< LocationSimple >::constBegin
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::QList< LocationSimple >::const_iterator ( exported_class_t::*constBegin_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "constBegin"
                , constBegin_function_type( &::QList< LocationSimple >::constBegin ) );
        
        }
        { //::QList< LocationSimple >::constEnd
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::QList< LocationSimple >::const_iterator ( exported_class_t::*constEnd_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "constEnd"
                , constEnd_function_type( &::QList< LocationSimple >::constEnd ) );
        
        }
        { //::QList< LocationSimple >::contains
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::QBool ( exported_class_t::*contains_function_type )( ::LocationSimple const & ) const;
            
            QList_LocationSimple_exposer.def( 
                "contains"
                , contains_function_type( &::QList< LocationSimple >::contains )
                , ( bp::arg("t") ) );
        
        }
        { //::QList< LocationSimple >::count
        
            typedef QList< LocationSimple > exported_class_t;
            typedef int ( exported_class_t::*count_function_type )( ::LocationSimple const & ) const;
            
            QList_LocationSimple_exposer.def( 
                "count"
                , count_function_type( &::QList< LocationSimple >::count )
                , ( bp::arg("t") ) );
        
        }
        { //::QList< LocationSimple >::count
        
            typedef QList< LocationSimple > exported_class_t;
            typedef int ( exported_class_t::*count_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "count"
                , count_function_type( &::QList< LocationSimple >::count ) );
        
        }
        { //::QList< LocationSimple >::detach
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*detach_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "detach"
                , detach_function_type( &::QList< LocationSimple >::detach ) );
        
        }
        { //::QList< LocationSimple >::detachShared
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*detachShared_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "detachShared"
                , detachShared_function_type( &::QList< LocationSimple >::detachShared ) );
        
        }
        { //::QList< LocationSimple >::empty
        
            typedef QList< LocationSimple > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "empty"
                , empty_function_type( &::QList< LocationSimple >::empty ) );
        
        }
        { //::QList< LocationSimple >::end
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::QList< LocationSimple >::iterator ( exported_class_t::*end_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "end"
                , end_function_type( &::QList< LocationSimple >::end ) );
        
        }
        { //::QList< LocationSimple >::end
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::QList< LocationSimple >::const_iterator ( exported_class_t::*end_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "end"
                , end_function_type( &::QList< LocationSimple >::end ) );
        
        }
        { //::QList< LocationSimple >::endsWith
        
            typedef QList< LocationSimple > exported_class_t;
            typedef bool ( exported_class_t::*endsWith_function_type )( ::LocationSimple const & ) const;
            
            QList_LocationSimple_exposer.def( 
                "endsWith"
                , endsWith_function_type( &::QList< LocationSimple >::endsWith )
                , ( bp::arg("t") ) );
        
        }
        { //::QList< LocationSimple >::erase
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::QList< LocationSimple >::iterator ( exported_class_t::*erase_function_type )( ::QList< LocationSimple >::iterator ) ;
            
            QList_LocationSimple_exposer.def( 
                "erase"
                , erase_function_type( &::QList< LocationSimple >::erase )
                , ( bp::arg("it") ) );
        
        }
        { //::QList< LocationSimple >::erase
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::QList< LocationSimple >::iterator ( exported_class_t::*erase_function_type )( ::QList< LocationSimple >::iterator,::QList< LocationSimple >::iterator ) ;
            
            QList_LocationSimple_exposer.def( 
                "erase"
                , erase_function_type( &::QList< LocationSimple >::erase )
                , ( bp::arg("afirst"), bp::arg("alast") ) );
        
        }
        { //::QList< LocationSimple >::first
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple & ( exported_class_t::*first_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "first"
                , first_function_type( &::QList< LocationSimple >::first )
                , bp::return_internal_reference< >() );
        
        }
        { //::QList< LocationSimple >::first
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple const & ( exported_class_t::*first_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "first"
                , first_function_type( &::QList< LocationSimple >::first )
                , bp::return_internal_reference< >() );
        
        }
        { //::QList< LocationSimple >::fromStdList
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::QList< LocationSimple > ( *fromStdList_function_type )( ::std::list< LocationSimple > const & );
            
            QList_LocationSimple_exposer.def( 
                "fromStdList"
                , fromStdList_function_type( &::QList< LocationSimple >::fromStdList )
                , ( bp::arg("list") ) );
        
        }
        { //::QList< LocationSimple >::front
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple & ( exported_class_t::*front_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "front"
                , front_function_type( &::QList< LocationSimple >::front )
                , bp::return_internal_reference< >() );
        
        }
        { //::QList< LocationSimple >::front
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple const & ( exported_class_t::*front_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "front"
                , front_function_type( &::QList< LocationSimple >::front )
                , bp::return_internal_reference< >() );
        
        }
        { //::QList< LocationSimple >::indexOf
        
            typedef QList< LocationSimple > exported_class_t;
            typedef int ( exported_class_t::*indexOf_function_type )( ::LocationSimple const &,int ) const;
            
            QList_LocationSimple_exposer.def( 
                "indexOf"
                , indexOf_function_type( &::QList< LocationSimple >::indexOf )
                , ( bp::arg("t"), bp::arg("from")=(int)(0) ) );
        
        }
        { //::QList< LocationSimple >::insert
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( int,::LocationSimple const & ) ;
            
            QList_LocationSimple_exposer.def( 
                "insert"
                , insert_function_type( &::QList< LocationSimple >::insert )
                , ( bp::arg("i"), bp::arg("t") ) );
        
        }
        { //::QList< LocationSimple >::insert
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::QList< LocationSimple >::iterator ( exported_class_t::*insert_function_type )( ::QList< LocationSimple >::iterator,::LocationSimple const & ) ;
            
            QList_LocationSimple_exposer.def( 
                "insert"
                , insert_function_type( &::QList< LocationSimple >::insert )
                , ( bp::arg("before"), bp::arg("t") ) );
        
        }
        { //::QList< LocationSimple >::isDetached
        
            typedef QList< LocationSimple > exported_class_t;
            typedef bool ( exported_class_t::*isDetached_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "isDetached"
                , isDetached_function_type( &::QList< LocationSimple >::isDetached ) );
        
        }
        { //::QList< LocationSimple >::isEmpty
        
            typedef QList< LocationSimple > exported_class_t;
            typedef bool ( exported_class_t::*isEmpty_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "isEmpty"
                , isEmpty_function_type( &::QList< LocationSimple >::isEmpty ) );
        
        }
        { //::QList< LocationSimple >::isSharedWith
        
            typedef QList< LocationSimple > exported_class_t;
            typedef bool ( exported_class_t::*isSharedWith_function_type )( ::QList< LocationSimple > const & ) const;
            
            QList_LocationSimple_exposer.def( 
                "isSharedWith"
                , isSharedWith_function_type( &::QList< LocationSimple >::isSharedWith )
                , ( bp::arg("other") ) );
        
        }
        { //::QList< LocationSimple >::last
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple & ( exported_class_t::*last_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "last"
                , last_function_type( &::QList< LocationSimple >::last )
                , bp::return_internal_reference< >() );
        
        }
        { //::QList< LocationSimple >::last
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple const & ( exported_class_t::*last_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "last"
                , last_function_type( &::QList< LocationSimple >::last )
                , bp::return_internal_reference< >() );
        
        }
        { //::QList< LocationSimple >::lastIndexOf
        
            typedef QList< LocationSimple > exported_class_t;
            typedef int ( exported_class_t::*lastIndexOf_function_type )( ::LocationSimple const &,int ) const;
            
            QList_LocationSimple_exposer.def( 
                "lastIndexOf"
                , lastIndexOf_function_type( &::QList< LocationSimple >::lastIndexOf )
                , ( bp::arg("t"), bp::arg("from")=(int)(-1) ) );
        
        }
        { //::QList< LocationSimple >::length
        
            typedef QList< LocationSimple > exported_class_t;
            typedef int ( exported_class_t::*length_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "length"
                , length_function_type( &::QList< LocationSimple >::length ) );
        
        }
        { //::QList< LocationSimple >::mid
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::QList< LocationSimple > ( exported_class_t::*mid_function_type )( int,int ) const;
            
            QList_LocationSimple_exposer.def( 
                "mid"
                , mid_function_type( &::QList< LocationSimple >::mid )
                , ( bp::arg("pos"), bp::arg("alength")=(int)(-1) ) );
        
        }
        { //::QList< LocationSimple >::move
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*move_function_type )( int,int ) ;
            
            QList_LocationSimple_exposer.def( 
                "move"
                , move_function_type( &::QList< LocationSimple >::move )
                , ( bp::arg("from"), bp::arg("to") ) );
        
        }
        QList_LocationSimple_exposer.def( bp::self != bp::self );
        QList_LocationSimple_exposer.def( bp::self + bp::self );
        QList_LocationSimple_exposer.def( bp::self += bp::self );
        QList_LocationSimple_exposer.def( bp::self += bp::other< LocationSimple >() );
        { //::QList< LocationSimple >::operator=
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::QList< LocationSimple > & ( exported_class_t::*assign_function_type )( ::QList< LocationSimple > const & ) ;
            
            QList_LocationSimple_exposer.def( 
                "assign"
                , assign_function_type( &::QList< LocationSimple >::operator= )
                , ( bp::arg("l") )
                , bp::return_self< >() );
        
        }
        QList_LocationSimple_exposer.def( bp::self == bp::self );
        { //::QList< LocationSimple >::operator[]
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple const & ( exported_class_t::*__getitem___function_type )( int ) const;
            
            QList_LocationSimple_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::QList< LocationSimple >::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::QList< LocationSimple >::operator[]
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple & ( exported_class_t::*__getitem___function_type )( int ) ;
            
            QList_LocationSimple_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::QList< LocationSimple >::operator[] )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::QList< LocationSimple >::pop_back
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*pop_back_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "pop_back"
                , pop_back_function_type( &::QList< LocationSimple >::pop_back ) );
        
        }
        { //::QList< LocationSimple >::pop_front
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*pop_front_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "pop_front"
                , pop_front_function_type( &::QList< LocationSimple >::pop_front ) );
        
        }
        { //::QList< LocationSimple >::prepend
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*prepend_function_type )( ::LocationSimple const & ) ;
            
            QList_LocationSimple_exposer.def( 
                "prepend"
                , prepend_function_type( &::QList< LocationSimple >::prepend )
                , ( bp::arg("t") ) );
        
        }
        { //::QList< LocationSimple >::push_back
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::LocationSimple const & ) ;
            
            QList_LocationSimple_exposer.def( 
                "push_back"
                , push_back_function_type( &::QList< LocationSimple >::push_back )
                , ( bp::arg("t") ) );
        
        }
        { //::QList< LocationSimple >::push_front
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::LocationSimple const & ) ;
            
            QList_LocationSimple_exposer.def( 
                "push_front"
                , push_front_function_type( &::QList< LocationSimple >::push_front )
                , ( bp::arg("t") ) );
        
        }
        { //::QList< LocationSimple >::removeAll
        
            typedef QList< LocationSimple > exported_class_t;
            typedef int ( exported_class_t::*removeAll_function_type )( ::LocationSimple const & ) ;
            
            QList_LocationSimple_exposer.def( 
                "removeAll"
                , removeAll_function_type( &::QList< LocationSimple >::removeAll )
                , ( bp::arg("_t") ) );
        
        }
        { //::QList< LocationSimple >::removeAt
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*removeAt_function_type )( int ) ;
            
            QList_LocationSimple_exposer.def( 
                "removeAt"
                , removeAt_function_type( &::QList< LocationSimple >::removeAt )
                , ( bp::arg("i") ) );
        
        }
        { //::QList< LocationSimple >::removeFirst
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*removeFirst_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "removeFirst"
                , removeFirst_function_type( &::QList< LocationSimple >::removeFirst ) );
        
        }
        { //::QList< LocationSimple >::removeLast
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*removeLast_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "removeLast"
                , removeLast_function_type( &::QList< LocationSimple >::removeLast ) );
        
        }
        { //::QList< LocationSimple >::removeOne
        
            typedef QList< LocationSimple > exported_class_t;
            typedef bool ( exported_class_t::*removeOne_function_type )( ::LocationSimple const & ) ;
            
            QList_LocationSimple_exposer.def( 
                "removeOne"
                , removeOne_function_type( &::QList< LocationSimple >::removeOne )
                , ( bp::arg("_t") ) );
        
        }
        { //::QList< LocationSimple >::replace
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*replace_function_type )( int,::LocationSimple const & ) ;
            
            QList_LocationSimple_exposer.def( 
                "replace"
                , replace_function_type( &::QList< LocationSimple >::replace )
                , ( bp::arg("i"), bp::arg("t") ) );
        
        }
        { //::QList< LocationSimple >::reserve
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*reserve_function_type )( int ) ;
            
            QList_LocationSimple_exposer.def( 
                "reserve"
                , reserve_function_type( &::QList< LocationSimple >::reserve )
                , ( bp::arg("alloc") ) );
        
        }
        { //::QList< LocationSimple >::setSharable
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*setSharable_function_type )( bool ) ;
            
            QList_LocationSimple_exposer.def( 
                "setSharable"
                , setSharable_function_type( &::QList< LocationSimple >::setSharable )
                , ( bp::arg("sharable") ) );
        
        }
        { //::QList< LocationSimple >::size
        
            typedef QList< LocationSimple > exported_class_t;
            typedef int ( exported_class_t::*size_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "size"
                , size_function_type( &::QList< LocationSimple >::size ) );
        
        }
        { //::QList< LocationSimple >::startsWith
        
            typedef QList< LocationSimple > exported_class_t;
            typedef bool ( exported_class_t::*startsWith_function_type )( ::LocationSimple const & ) const;
            
            QList_LocationSimple_exposer.def( 
                "startsWith"
                , startsWith_function_type( &::QList< LocationSimple >::startsWith )
                , ( bp::arg("t") ) );
        
        }
        { //::QList< LocationSimple >::swap
        
            typedef QList< LocationSimple > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( int,int ) ;
            
            QList_LocationSimple_exposer.def( 
                "swap"
                , swap_function_type( &::QList< LocationSimple >::swap )
                , ( bp::arg("i"), bp::arg("j") ) );
        
        }
        { //::QList< LocationSimple >::takeAt
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple ( exported_class_t::*takeAt_function_type )( int ) ;
            
            QList_LocationSimple_exposer.def( 
                "takeAt"
                , takeAt_function_type( &::QList< LocationSimple >::takeAt )
                , ( bp::arg("i") ) );
        
        }
        { //::QList< LocationSimple >::takeFirst
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple ( exported_class_t::*takeFirst_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "takeFirst"
                , takeFirst_function_type( &::QList< LocationSimple >::takeFirst ) );
        
        }
        { //::QList< LocationSimple >::takeLast
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple ( exported_class_t::*takeLast_function_type )(  ) ;
            
            QList_LocationSimple_exposer.def( 
                "takeLast"
                , takeLast_function_type( &::QList< LocationSimple >::takeLast ) );
        
        }
        { //::QList< LocationSimple >::toStdList
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::std::list< LocationSimple > ( exported_class_t::*toStdList_function_type )(  ) const;
            
            QList_LocationSimple_exposer.def( 
                "toStdList"
                , toStdList_function_type( &::QList< LocationSimple >::toStdList ) );
        
        }
        { //::QList< LocationSimple >::value
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple ( exported_class_t::*value_function_type )( int ) const;
            
            QList_LocationSimple_exposer.def( 
                "value"
                , value_function_type( &::QList< LocationSimple >::value )
                , ( bp::arg("i") ) );
        
        }
        { //::QList< LocationSimple >::value
        
            typedef QList< LocationSimple > exported_class_t;
            typedef ::LocationSimple ( exported_class_t::*value_function_type )( int,::LocationSimple const & ) const;
            
            QList_LocationSimple_exposer.def( 
                "value"
                , value_function_type( &::QList< LocationSimple >::value )
                , ( bp::arg("i"), bp::arg("defaultValue") ) );
        
        }
        QList_LocationSimple_exposer.staticmethod( "fromStdList" );
        QList_LocationSimple_exposer.def(bp::indexing::container_suite<
                            QList<LocationSimple>, 
                            bp::indexing::all_methods, 
                            list_algorithms<qlist_container_traits<QList<LocationSimple> > > >());
    }

}
