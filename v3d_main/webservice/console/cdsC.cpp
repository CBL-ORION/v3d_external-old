/* cdsC.cpp
   Generated by gSOAP 2.8.3 from cdsModHeader.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "cdsH.h"

namespace cds {

SOAP_SOURCE_STAMP("@(#) cdsC.cpp ver 2.8.3 2011-08-22 20:16:42 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_cds_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_cds_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_cds_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_cds_fw__entityType:
		return soap_in_fw__entityType(soap, NULL, NULL, "fw:entityType");
	case SOAP_TYPE_cds_fw__entityStatus:
		return soap_in_fw__entityStatus(soap, NULL, NULL, "fw:entityStatus");
	case SOAP_TYPE_cds_fw__user:
		return soap_in_fw__user(soap, NULL, NULL, "fw:user");
	case SOAP_TYPE_cds_fw__entityAttribute:
		return soap_in_fw__entityAttribute(soap, NULL, NULL, "fw:entityAttribute");
	case SOAP_TYPE_cds_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_cds_fw__entityDataArray:
		return soap_in_fw__entityDataArray(soap, NULL, NULL, "fw:entityDataArray");
	case SOAP_TYPE_cds_fw__entity:
		return soap_in_fw__entity(soap, NULL, NULL, "fw:entity");
	case SOAP_TYPE_cds_fw__entityData:
		return soap_in_fw__entityData(soap, NULL, NULL, "fw:entityData");
	case SOAP_TYPE_cds_fw__getParentEntityDataArray:
		return soap_in_fw__getParentEntityDataArray(soap, NULL, NULL, "fw:getParentEntityDataArray");
	case SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse:
		return soap_in_fw__getParentEntityDataArrayResponse(soap, NULL, NULL, "fw:getParentEntityDataArrayResponse");
	case SOAP_TYPE_cds_fw__registerClient:
		return soap_in_fw__registerClient(soap, NULL, NULL, "fw:registerClient");
	case SOAP_TYPE_cds_fw__registerClientResponse:
		return soap_in_fw__registerClientResponse(soap, NULL, NULL, "fw:registerClientResponse");
	case SOAP_TYPE_cds_fw__reservePort:
		return soap_in_fw__reservePort(soap, NULL, NULL, "fw:reservePort");
	case SOAP_TYPE_cds_fw__reservePortResponse:
		return soap_in_fw__reservePortResponse(soap, NULL, NULL, "fw:reservePortResponse");
	case SOAP_TYPE_cds_fw__getCurrentOntology:
		return soap_in_fw__getCurrentOntology(soap, NULL, NULL, "fw:getCurrentOntology");
	case SOAP_TYPE_cds_fw__getCurrentOntologyResponse:
		return soap_in_fw__getCurrentOntologyResponse(soap, NULL, NULL, "fw:getCurrentOntologyResponse");
	case SOAP_TYPE_cds_fw__getEntityTree:
		return soap_in_fw__getEntityTree(soap, NULL, NULL, "fw:getEntityTree");
	case SOAP_TYPE_cds_fw__getEntityTreeResponse:
		return soap_in_fw__getEntityTreeResponse(soap, NULL, NULL, "fw:getEntityTreeResponse");
	case SOAP_TYPE_cds_fw__getEntityById:
		return soap_in_fw__getEntityById(soap, NULL, NULL, "fw:getEntityById");
	case SOAP_TYPE_cds_fw__getEntityByIdResponse:
		return soap_in_fw__getEntityByIdResponse(soap, NULL, NULL, "fw:getEntityByIdResponse");
	case SOAP_TYPE_cds_PointerTofw__entityDataArray:
		return soap_in_PointerTofw__entityDataArray(soap, NULL, NULL, "fw:entityDataArray");
	case SOAP_TYPE_cds_PointerTo_fw__entity_entityDataSet:
		return soap_in_PointerTo_fw__entity_entityDataSet(soap, NULL, NULL, "fw:entity-entityDataSet");
	case SOAP_TYPE_cds_PointerTofw__entityData:
		return soap_in_PointerTofw__entityData(soap, NULL, NULL, "fw:entityData");
	case SOAP_TYPE_cds_PointerTofw__entityType:
		return soap_in_PointerTofw__entityType(soap, NULL, NULL, "fw:entityType");
	case SOAP_TYPE_cds_PointerTofw__entityStatus:
		return soap_in_PointerTofw__entityStatus(soap, NULL, NULL, "fw:entityStatus");
	case SOAP_TYPE_cds_PointerToLONG64:
		return soap_in_PointerToLONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_cds_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_cds_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_cds_PointerTofw__user:
		return soap_in_PointerTofw__user(soap, NULL, NULL, "fw:user");
	case SOAP_TYPE_cds_PointerTofw__entity:
		return soap_in_PointerTofw__entity(soap, NULL, NULL, "fw:entity");
	case SOAP_TYPE_cds_PointerTofw__entityAttribute:
		return soap_in_PointerTofw__entityAttribute(soap, NULL, NULL, "fw:entityAttribute");
	case SOAP_TYPE_cds__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_cds_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "fw:entityType"))
		{	*type = SOAP_TYPE_cds_fw__entityType;
			return soap_in_fw__entityType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:entityStatus"))
		{	*type = SOAP_TYPE_cds_fw__entityStatus;
			return soap_in_fw__entityStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:user"))
		{	*type = SOAP_TYPE_cds_fw__user;
			return soap_in_fw__user(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:entityAttribute"))
		{	*type = SOAP_TYPE_cds_fw__entityAttribute;
			return soap_in_fw__entityAttribute(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_cds_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:entityDataArray"))
		{	*type = SOAP_TYPE_cds_fw__entityDataArray;
			return soap_in_fw__entityDataArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:entity"))
		{	*type = SOAP_TYPE_cds_fw__entity;
			return soap_in_fw__entity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:entityData"))
		{	*type = SOAP_TYPE_cds_fw__entityData;
			return soap_in_fw__entityData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_cds_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_cds_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_cds_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getParentEntityDataArray"))
		{	*type = SOAP_TYPE_cds_fw__getParentEntityDataArray;
			return soap_in_fw__getParentEntityDataArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getParentEntityDataArrayResponse"))
		{	*type = SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse;
			return soap_in_fw__getParentEntityDataArrayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:registerClient"))
		{	*type = SOAP_TYPE_cds_fw__registerClient;
			return soap_in_fw__registerClient(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:registerClientResponse"))
		{	*type = SOAP_TYPE_cds_fw__registerClientResponse;
			return soap_in_fw__registerClientResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:reservePort"))
		{	*type = SOAP_TYPE_cds_fw__reservePort;
			return soap_in_fw__reservePort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:reservePortResponse"))
		{	*type = SOAP_TYPE_cds_fw__reservePortResponse;
			return soap_in_fw__reservePortResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getCurrentOntology"))
		{	*type = SOAP_TYPE_cds_fw__getCurrentOntology;
			return soap_in_fw__getCurrentOntology(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getCurrentOntologyResponse"))
		{	*type = SOAP_TYPE_cds_fw__getCurrentOntologyResponse;
			return soap_in_fw__getCurrentOntologyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getEntityTree"))
		{	*type = SOAP_TYPE_cds_fw__getEntityTree;
			return soap_in_fw__getEntityTree(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getEntityTreeResponse"))
		{	*type = SOAP_TYPE_cds_fw__getEntityTreeResponse;
			return soap_in_fw__getEntityTreeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getEntityById"))
		{	*type = SOAP_TYPE_cds_fw__getEntityById;
			return soap_in_fw__getEntityById(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getEntityByIdResponse"))
		{	*type = SOAP_TYPE_cds_fw__getEntityByIdResponse;
			return soap_in_fw__getEntityByIdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_cds__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_cds_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "fw:entity-entityDataSet"))
		{	*type = SOAP_TYPE_cds__fw__entity_entityDataSet;
			return soap_in__fw__entity_entityDataSet(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_cds_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_cds_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_cds_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_cds__fw__entity_entityDataSet:
		return ((_fw__entity_entityDataSet *)ptr)->soap_out(soap, "fw:entity-entityDataSet", id, NULL);
	case SOAP_TYPE_cds_fw__entityType:
		return soap_out_fw__entityType(soap, tag, id, (const std::string *)ptr, "fw:entityType");
	case SOAP_TYPE_cds_fw__entityStatus:
		return soap_out_fw__entityStatus(soap, tag, id, (const std::string *)ptr, "fw:entityStatus");
	case SOAP_TYPE_cds_fw__user:
		return soap_out_fw__user(soap, tag, id, (const std::string *)ptr, "fw:user");
	case SOAP_TYPE_cds_fw__entityAttribute:
		return soap_out_fw__entityAttribute(soap, tag, id, (const std::string *)ptr, "fw:entityAttribute");
	case SOAP_TYPE_cds_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_cds_fw__entityDataArray:
		return ((fw__entityDataArray *)ptr)->soap_out(soap, tag, id, "fw:entityDataArray");
	case SOAP_TYPE_cds_fw__entity:
		return ((fw__entity *)ptr)->soap_out(soap, tag, id, "fw:entity");
	case SOAP_TYPE_cds_fw__entityData:
		return ((fw__entityData *)ptr)->soap_out(soap, tag, id, "fw:entityData");
	case SOAP_TYPE_cds_fw__getParentEntityDataArray:
		return soap_out_fw__getParentEntityDataArray(soap, tag, id, (const struct fw__getParentEntityDataArray *)ptr, "fw:getParentEntityDataArray");
	case SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse:
		return soap_out_fw__getParentEntityDataArrayResponse(soap, tag, id, (const struct fw__getParentEntityDataArrayResponse *)ptr, "fw:getParentEntityDataArrayResponse");
	case SOAP_TYPE_cds_fw__registerClient:
		return soap_out_fw__registerClient(soap, tag, id, (const struct fw__registerClient *)ptr, "fw:registerClient");
	case SOAP_TYPE_cds_fw__registerClientResponse:
		return soap_out_fw__registerClientResponse(soap, tag, id, (const struct fw__registerClientResponse *)ptr, "fw:registerClientResponse");
	case SOAP_TYPE_cds_fw__reservePort:
		return soap_out_fw__reservePort(soap, tag, id, (const struct fw__reservePort *)ptr, "fw:reservePort");
	case SOAP_TYPE_cds_fw__reservePortResponse:
		return soap_out_fw__reservePortResponse(soap, tag, id, (const struct fw__reservePortResponse *)ptr, "fw:reservePortResponse");
	case SOAP_TYPE_cds_fw__getCurrentOntology:
		return soap_out_fw__getCurrentOntology(soap, tag, id, (const struct fw__getCurrentOntology *)ptr, "fw:getCurrentOntology");
	case SOAP_TYPE_cds_fw__getCurrentOntologyResponse:
		return soap_out_fw__getCurrentOntologyResponse(soap, tag, id, (const struct fw__getCurrentOntologyResponse *)ptr, "fw:getCurrentOntologyResponse");
	case SOAP_TYPE_cds_fw__getEntityTree:
		return soap_out_fw__getEntityTree(soap, tag, id, (const struct fw__getEntityTree *)ptr, "fw:getEntityTree");
	case SOAP_TYPE_cds_fw__getEntityTreeResponse:
		return soap_out_fw__getEntityTreeResponse(soap, tag, id, (const struct fw__getEntityTreeResponse *)ptr, "fw:getEntityTreeResponse");
	case SOAP_TYPE_cds_fw__getEntityById:
		return soap_out_fw__getEntityById(soap, tag, id, (const struct fw__getEntityById *)ptr, "fw:getEntityById");
	case SOAP_TYPE_cds_fw__getEntityByIdResponse:
		return soap_out_fw__getEntityByIdResponse(soap, tag, id, (const struct fw__getEntityByIdResponse *)ptr, "fw:getEntityByIdResponse");
	case SOAP_TYPE_cds_PointerTofw__entityDataArray:
		return soap_out_PointerTofw__entityDataArray(soap, tag, id, (fw__entityDataArray *const*)ptr, "fw:entityDataArray");
	case SOAP_TYPE_cds_PointerTo_fw__entity_entityDataSet:
		return soap_out_PointerTo_fw__entity_entityDataSet(soap, tag, id, (_fw__entity_entityDataSet *const*)ptr, "fw:entity-entityDataSet");
	case SOAP_TYPE_cds_PointerTofw__entityData:
		return soap_out_PointerTofw__entityData(soap, tag, id, (fw__entityData *const*)ptr, "fw:entityData");
	case SOAP_TYPE_cds_PointerTofw__entityType:
		return soap_out_PointerTofw__entityType(soap, tag, id, (std::string *const*)ptr, "fw:entityType");
	case SOAP_TYPE_cds_PointerTofw__entityStatus:
		return soap_out_PointerTofw__entityStatus(soap, tag, id, (std::string *const*)ptr, "fw:entityStatus");
	case SOAP_TYPE_cds_PointerToLONG64:
		return soap_out_PointerToLONG64(soap, tag, id, (LONG64 *const*)ptr, "xsd:long");
	case SOAP_TYPE_cds_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_cds_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_cds_PointerTofw__user:
		return soap_out_PointerTofw__user(soap, tag, id, (std::string *const*)ptr, "fw:user");
	case SOAP_TYPE_cds_PointerTofw__entity:
		return soap_out_PointerTofw__entity(soap, tag, id, (fw__entity *const*)ptr, "fw:entity");
	case SOAP_TYPE_cds_PointerTofw__entityAttribute:
		return soap_out_PointerTofw__entityAttribute(soap, tag, id, (std::string *const*)ptr, "fw:entityAttribute");
	case SOAP_TYPE_cds__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_cds_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_cds__fw__entity_entityDataSet:
		((_fw__entity_entityDataSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__entityType:
		soap_serialize_fw__entityType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_cds_fw__entityStatus:
		soap_serialize_fw__entityStatus(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_cds_fw__user:
		soap_serialize_fw__user(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_cds_fw__entityAttribute:
		soap_serialize_fw__entityAttribute(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_cds_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_cds_fw__entityDataArray:
		((fw__entityDataArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__entity:
		((fw__entity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__entityData:
		((fw__entityData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__getParentEntityDataArray:
		soap_serialize_fw__getParentEntityDataArray(soap, (const struct fw__getParentEntityDataArray *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse:
		soap_serialize_fw__getParentEntityDataArrayResponse(soap, (const struct fw__getParentEntityDataArrayResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__registerClient:
		soap_serialize_fw__registerClient(soap, (const struct fw__registerClient *)ptr);
		break;
	case SOAP_TYPE_cds_fw__registerClientResponse:
		soap_serialize_fw__registerClientResponse(soap, (const struct fw__registerClientResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__reservePort:
		soap_serialize_fw__reservePort(soap, (const struct fw__reservePort *)ptr);
		break;
	case SOAP_TYPE_cds_fw__reservePortResponse:
		soap_serialize_fw__reservePortResponse(soap, (const struct fw__reservePortResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getCurrentOntology:
		soap_serialize_fw__getCurrentOntology(soap, (const struct fw__getCurrentOntology *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getCurrentOntologyResponse:
		soap_serialize_fw__getCurrentOntologyResponse(soap, (const struct fw__getCurrentOntologyResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityTree:
		soap_serialize_fw__getEntityTree(soap, (const struct fw__getEntityTree *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityTreeResponse:
		soap_serialize_fw__getEntityTreeResponse(soap, (const struct fw__getEntityTreeResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityById:
		soap_serialize_fw__getEntityById(soap, (const struct fw__getEntityById *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityByIdResponse:
		soap_serialize_fw__getEntityByIdResponse(soap, (const struct fw__getEntityByIdResponse *)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__entityDataArray:
		soap_serialize_PointerTofw__entityDataArray(soap, (fw__entityDataArray *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTo_fw__entity_entityDataSet:
		soap_serialize_PointerTo_fw__entity_entityDataSet(soap, (_fw__entity_entityDataSet *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__entityData:
		soap_serialize_PointerTofw__entityData(soap, (fw__entityData *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__entityType:
		soap_serialize_PointerTofw__entityType(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__entityStatus:
		soap_serialize_PointerTofw__entityStatus(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerToLONG64:
		soap_serialize_PointerToLONG64(soap, (LONG64 *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__user:
		soap_serialize_PointerTofw__user(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__entity:
		soap_serialize_PointerTofw__entity(soap, (fw__entity *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__entityAttribute:
		soap_serialize_PointerTofw__entityAttribute(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_cds__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_cds_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 cds_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_cds_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__entityData:
		return (void*)soap_instantiate_fw__entityData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds__fw__entity_entityDataSet:
		return (void*)soap_instantiate__fw__entity_entityDataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__entity:
		return (void*)soap_instantiate_fw__entity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__entityDataArray:
		return (void*)soap_instantiate_fw__entityDataArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getEntityByIdResponse:
		return (void*)soap_instantiate_fw__getEntityByIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getEntityById:
		return (void*)soap_instantiate_fw__getEntityById(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getEntityTreeResponse:
		return (void*)soap_instantiate_fw__getEntityTreeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getEntityTree:
		return (void*)soap_instantiate_fw__getEntityTree(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getCurrentOntologyResponse:
		return (void*)soap_instantiate_fw__getCurrentOntologyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getCurrentOntology:
		return (void*)soap_instantiate_fw__getCurrentOntology(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__reservePortResponse:
		return (void*)soap_instantiate_fw__reservePortResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__reservePort:
		return (void*)soap_instantiate_fw__reservePort(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__registerClientResponse:
		return (void*)soap_instantiate_fw__registerClientResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__registerClient:
		return (void*)soap_instantiate_fw__registerClient(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse:
		return (void*)soap_instantiate_fw__getParentEntityDataArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getParentEntityDataArray:
		return (void*)soap_instantiate_fw__getParentEntityDataArray(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_cds_fw__entityAttribute:
		return (void*)soap_instantiate_fw__entityAttribute(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__user:
		return (void*)soap_instantiate_fw__user(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__entityStatus:
		return (void*)soap_instantiate_fw__entityStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__entityType:
		return (void*)soap_instantiate_fw__entityType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entityData:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTofw__entityData(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 cds_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_cds_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__entityData:
		if (p->size < 0)
			SOAP_DELETE((fw__entityData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((fw__entityData*)p->ptr);
		break;
	case SOAP_TYPE_cds__fw__entity_entityDataSet:
		if (p->size < 0)
			SOAP_DELETE((_fw__entity_entityDataSet*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_fw__entity_entityDataSet*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__entity:
		if (p->size < 0)
			SOAP_DELETE((fw__entity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((fw__entity*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__entityDataArray:
		if (p->size < 0)
			SOAP_DELETE((fw__entityDataArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((fw__entityDataArray*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityByIdResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getEntityByIdResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getEntityByIdResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityById:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getEntityById*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getEntityById*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityTreeResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getEntityTreeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getEntityTreeResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityTree:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getEntityTree*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getEntityTree*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getCurrentOntologyResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getCurrentOntologyResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getCurrentOntologyResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getCurrentOntology:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getCurrentOntology*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getCurrentOntology*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__reservePortResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__reservePortResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__reservePortResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__reservePort:
		if (p->size < 0)
			SOAP_DELETE((struct fw__reservePort*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__reservePort*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__registerClientResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__registerClientResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__registerClientResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__registerClient:
		if (p->size < 0)
			SOAP_DELETE((struct fw__registerClient*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__registerClient*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getParentEntityDataArrayResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getParentEntityDataArrayResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getParentEntityDataArray:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getParentEntityDataArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getParentEntityDataArray*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_cds_fw__entityAttribute:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__user:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__entityStatus:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__entityType:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entityData:
		if (p->size < 0)
			SOAP_DELETE((std::vector<fw__entityData * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<fw__entityData * >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, cds_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, cds_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 cds_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entityData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container cds_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<fw__entityData * >*)p)[len] = *(fw__entityData **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_cds_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_cds_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_cds_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_cds_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_cds_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _fw__entity_entityDataSet::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfPointerTofw__entityData(soap, &this->_fw__entity_entityDataSet::entityData);
}

void _fw__entity_entityDataSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTofw__entityData(soap, &this->_fw__entity_entityDataSet::entityData);
}

int _fw__entity_entityDataSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__fw__entity_entityDataSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fw__entity_entityDataSet(struct soap *soap, const char *tag, int id, const _fw__entity_entityDataSet *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds__fw__entity_entityDataSet), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTofw__entityData(soap, "entityData", -1, &(a->_fw__entity_entityDataSet::entityData), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_fw__entity_entityDataSet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__fw__entity_entityDataSet(soap, tag, this, type);
}

SOAP_FMAC3 _fw__entity_entityDataSet * SOAP_FMAC4 soap_in__fw__entity_entityDataSet(struct soap *soap, const char *tag, _fw__entity_entityDataSet *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_fw__entity_entityDataSet *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds__fw__entity_entityDataSet, sizeof(_fw__entity_entityDataSet), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds__fw__entity_entityDataSet)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_fw__entity_entityDataSet *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTofw__entityData(soap, "entityData", &(a->_fw__entity_entityDataSet::entityData), "fw:entityData"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_fw__entity_entityDataSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds__fw__entity_entityDataSet, 0, sizeof(_fw__entity_entityDataSet), 0, soap_copy__fw__entity_entityDataSet);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _fw__entity_entityDataSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds__fw__entity_entityDataSet);
	if (this->soap_out(soap, tag?tag:"fw:entity-entityDataSet", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_fw__entity_entityDataSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__fw__entity_entityDataSet(soap, this, tag, type);
}

SOAP_FMAC3 _fw__entity_entityDataSet * SOAP_FMAC4 soap_get__fw__entity_entityDataSet(struct soap *soap, _fw__entity_entityDataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in__fw__entity_entityDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _fw__entity_entityDataSet * SOAP_FMAC2 soap_instantiate__fw__entity_entityDataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__fw__entity_entityDataSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds__fw__entity_entityDataSet, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_fw__entity_entityDataSet);
		if (size)
			*size = sizeof(_fw__entity_entityDataSet);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_fw__entity_entityDataSet[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_fw__entity_entityDataSet);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_fw__entity_entityDataSet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fw__entity_entityDataSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _fw__entity_entityDataSet %p -> %p\n", q, p));
	*(_fw__entity_entityDataSet*)p = *(_fw__entity_entityDataSet*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__entityType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_cds_fw__entityType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fw__entityType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__entityType, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__entityType, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_cds_fw__entityType, 0, sizeof(std::string), 0, soap_copy_fw__entityType);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__entityType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__entityType);
	if (soap_out_fw__entityType(soap, tag?tag:"fw:entityType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fw__entityType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__entityType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__entityStatus(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_cds_fw__entityStatus), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fw__entityStatus(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__entityStatus, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__entityStatus, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_cds_fw__entityStatus, 0, sizeof(std::string), 0, soap_copy_fw__entityStatus);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__entityStatus(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__entityStatus);
	if (soap_out_fw__entityStatus(soap, tag?tag:"fw:entityStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fw__entityStatus(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__entityStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__user(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_cds_fw__user), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fw__user(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__user, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__user, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_cds_fw__user, 0, sizeof(std::string), 0, soap_copy_fw__user);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__user(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__user);
	if (soap_out_fw__user(soap, tag?tag:"fw:user", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fw__user(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__user(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__entityAttribute(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_cds_fw__entityAttribute), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fw__entityAttribute(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__entityAttribute, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__entityAttribute, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_cds_fw__entityAttribute, 0, sizeof(std::string), 0, soap_copy_fw__entityAttribute);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__entityAttribute(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__entityAttribute);
	if (soap_out_fw__entityAttribute(soap, tag?tag:"fw:entityAttribute", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fw__entityAttribute(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__entityAttribute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_cds_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_cds_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_std__string, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void fw__entityDataArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTofw__entityData(soap, &this->fw__entityDataArray::item);
	/* transient soap skipped */
}

void fw__entityDataArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTofw__entityData(soap, &this->fw__entityDataArray::item);
	/* transient soap skipped */
}

int fw__entityDataArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_fw__entityDataArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__entityDataArray(struct soap *soap, const char *tag, int id, const fw__entityDataArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__entityDataArray), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTofw__entityData(soap, "item", -1, &(a->fw__entityDataArray::item), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *fw__entityDataArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_fw__entityDataArray(soap, tag, this, type);
}

SOAP_FMAC3 fw__entityDataArray * SOAP_FMAC4 soap_in_fw__entityDataArray(struct soap *soap, const char *tag, fw__entityDataArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (fw__entityDataArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__entityDataArray, sizeof(fw__entityDataArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds_fw__entityDataArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (fw__entityDataArray *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTofw__entityData(soap, "item", &(a->fw__entityDataArray::item), "fw:entityData"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (fw__entityDataArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__entityDataArray, 0, sizeof(fw__entityDataArray), 0, soap_copy_fw__entityDataArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int fw__entityDataArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds_fw__entityDataArray);
	if (this->soap_out(soap, tag?tag:"fw:entityDataArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *fw__entityDataArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_fw__entityDataArray(soap, this, tag, type);
}

SOAP_FMAC3 fw__entityDataArray * SOAP_FMAC4 soap_get_fw__entityDataArray(struct soap *soap, fw__entityDataArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__entityDataArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 fw__entityDataArray * SOAP_FMAC2 soap_instantiate_fw__entityDataArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__entityDataArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__entityDataArray, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(fw__entityDataArray);
		if (size)
			*size = sizeof(fw__entityDataArray);
		((fw__entityDataArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(fw__entityDataArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(fw__entityDataArray);
		for (int i = 0; i < n; i++)
			((fw__entityDataArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (fw__entityDataArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__entityDataArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying fw__entityDataArray %p -> %p\n", q, p));
	*(fw__entityDataArray*)p = *(fw__entityDataArray*)q;
}

void fw__entity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->fw__entity::name = NULL;
	this->fw__entity::user = NULL;
	this->fw__entity::entityStatus = NULL;
	this->fw__entity::entityType = NULL;
	this->fw__entity::entityDataSet = NULL;
	this->fw__entity::id = NULL;
	/* transient soap skipped */
}

void fw__entity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->fw__entity::name);
	soap_serialize_PointerTofw__user(soap, &this->fw__entity::user);
	soap_serialize_PointerTofw__entityStatus(soap, &this->fw__entity::entityStatus);
	soap_serialize_PointerTofw__entityType(soap, &this->fw__entity::entityType);
	soap_serialize_PointerTo_fw__entity_entityDataSet(soap, &this->fw__entity::entityDataSet);
	/* transient soap skipped */
}

int fw__entity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_fw__entity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__entity(struct soap *soap, const char *tag, int id, const fw__entity *a, const char *type)
{
	if (((fw__entity*)a)->id)
		soap_set_attr(soap, "id", soap_LONG642s(soap, *((fw__entity*)a)->id), 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__entity), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "name", -1, &(a->fw__entity::name), ""))
		return soap->error;
	if (soap_out_PointerTofw__user(soap, "user", -1, &(a->fw__entity::user), ""))
		return soap->error;
	if (soap_out_PointerTofw__entityStatus(soap, "entityStatus", -1, &(a->fw__entity::entityStatus), ""))
		return soap->error;
	if (soap_out_PointerTofw__entityType(soap, "entityType", -1, &(a->fw__entity::entityType), ""))
		return soap->error;
	if (soap_out_PointerTo_fw__entity_entityDataSet(soap, "entityDataSet", -1, &(a->fw__entity::entityDataSet), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *fw__entity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_fw__entity(soap, tag, this, type);
}

SOAP_FMAC3 fw__entity * SOAP_FMAC4 soap_in_fw__entity(struct soap *soap, const char *tag, fw__entity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (fw__entity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__entity, sizeof(fw__entity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds_fw__entity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (fw__entity *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "id", 0);
		if (t)
		{
			if (!(((fw__entity*)a)->id = (LONG64 *)soap_malloc(soap, sizeof(LONG64))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2LONG64(soap, t, ((fw__entity*)a)->id))
			return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_name1 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_entityStatus1 = 1;
	size_t soap_flag_entityType1 = 1;
	size_t soap_flag_entityDataSet1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "name", &(a->fw__entity::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_user1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTofw__user(soap, "user", &(a->fw__entity::user), "fw:user"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_entityStatus1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTofw__entityStatus(soap, "entityStatus", &(a->fw__entity::entityStatus), "fw:entityStatus"))
				{	soap_flag_entityStatus1--;
					continue;
				}
			if (soap_flag_entityType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTofw__entityType(soap, "entityType", &(a->fw__entity::entityType), "fw:entityType"))
				{	soap_flag_entityType1--;
					continue;
				}
			if (soap_flag_entityDataSet1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_fw__entity_entityDataSet(soap, "entityDataSet", &(a->fw__entity::entityDataSet), ""))
				{	soap_flag_entityDataSet1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (fw__entity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__entity, 0, sizeof(fw__entity), 0, soap_copy_fw__entity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int fw__entity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds_fw__entity);
	if (this->soap_out(soap, tag?tag:"fw:entity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *fw__entity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_fw__entity(soap, this, tag, type);
}

SOAP_FMAC3 fw__entity * SOAP_FMAC4 soap_get_fw__entity(struct soap *soap, fw__entity *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__entity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 fw__entity * SOAP_FMAC2 soap_instantiate_fw__entity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__entity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__entity, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(fw__entity);
		if (size)
			*size = sizeof(fw__entity);
		((fw__entity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(fw__entity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(fw__entity);
		for (int i = 0; i < n; i++)
			((fw__entity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (fw__entity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__entity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying fw__entity %p -> %p\n", q, p));
	*(fw__entity*)p = *(fw__entity*)q;
}

void fw__entityData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->fw__entityData::entityAttribute = NULL;
	this->fw__entityData::childEntity = NULL;
	this->fw__entityData::user = NULL;
	this->fw__entityData::value = NULL;
	this->fw__entityData::orderIndex = NULL;
	this->fw__entityData::id = NULL;
	/* transient soap skipped */
}

void fw__entityData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entityAttribute(soap, &this->fw__entityData::entityAttribute);
	soap_serialize_PointerTofw__entity(soap, &this->fw__entityData::childEntity);
	soap_serialize_PointerTofw__user(soap, &this->fw__entityData::user);
	soap_serialize_PointerTostd__string(soap, &this->fw__entityData::value);
	soap_serialize_PointerToint(soap, &this->fw__entityData::orderIndex);
	/* transient soap skipped */
}

int fw__entityData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_fw__entityData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__entityData(struct soap *soap, const char *tag, int id, const fw__entityData *a, const char *type)
{
	if (((fw__entityData*)a)->id)
		soap_set_attr(soap, "id", soap_LONG642s(soap, *((fw__entityData*)a)->id), 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__entityData), type))
		return soap->error;
	if (soap_out_PointerTofw__entityAttribute(soap, "entityAttribute", -1, &(a->fw__entityData::entityAttribute), ""))
		return soap->error;
	if (soap_out_PointerTofw__entity(soap, "childEntity", -1, &(a->fw__entityData::childEntity), ""))
		return soap->error;
	if (soap_out_PointerTofw__user(soap, "user", -1, &(a->fw__entityData::user), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "value", -1, &(a->fw__entityData::value), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "orderIndex", -1, &(a->fw__entityData::orderIndex), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *fw__entityData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_fw__entityData(soap, tag, this, type);
}

SOAP_FMAC3 fw__entityData * SOAP_FMAC4 soap_in_fw__entityData(struct soap *soap, const char *tag, fw__entityData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (fw__entityData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__entityData, sizeof(fw__entityData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds_fw__entityData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (fw__entityData *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "id", 0);
		if (t)
		{
			if (!(((fw__entityData*)a)->id = (LONG64 *)soap_malloc(soap, sizeof(LONG64))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2LONG64(soap, t, ((fw__entityData*)a)->id))
			return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_entityAttribute1 = 1;
	size_t soap_flag_childEntity1 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_value1 = 1;
	size_t soap_flag_orderIndex1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entityAttribute1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTofw__entityAttribute(soap, "entityAttribute", &(a->fw__entityData::entityAttribute), "fw:entityAttribute"))
				{	soap_flag_entityAttribute1--;
					continue;
				}
			if (soap_flag_childEntity1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entity(soap, "childEntity", &(a->fw__entityData::childEntity), "fw:entity"))
				{	soap_flag_childEntity1--;
					continue;
				}
			if (soap_flag_user1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTofw__user(soap, "user", &(a->fw__entityData::user), "fw:user"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "value", &(a->fw__entityData::value), "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap_flag_orderIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "orderIndex", &(a->fw__entityData::orderIndex), "xsd:int"))
				{	soap_flag_orderIndex1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (fw__entityData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__entityData, 0, sizeof(fw__entityData), 0, soap_copy_fw__entityData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int fw__entityData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds_fw__entityData);
	if (this->soap_out(soap, tag?tag:"fw:entityData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *fw__entityData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_fw__entityData(soap, this, tag, type);
}

SOAP_FMAC3 fw__entityData * SOAP_FMAC4 soap_get_fw__entityData(struct soap *soap, fw__entityData *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__entityData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 fw__entityData * SOAP_FMAC2 soap_instantiate_fw__entityData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__entityData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__entityData, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(fw__entityData);
		if (size)
			*size = sizeof(fw__entityData);
		((fw__entityData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(fw__entityData[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(fw__entityData);
		for (int i = 0; i < n; i++)
			((fw__entityData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (fw__entityData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__entityData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying fw__entityData %p -> %p\n", q, p));
	*(fw__entityData*)p = *(fw__entityData*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_SOAP_ENV__Fault, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_SOAP_ENV__Reason, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_SOAP_ENV__Detail, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_SOAP_ENV__Code, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_SOAP_ENV__Header, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getParentEntityDataArray(struct soap *soap, struct fw__getParentEntityDataArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->childEntityId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getParentEntityDataArray(struct soap *soap, const struct fw__getParentEntityDataArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->childEntityId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getParentEntityDataArray(struct soap *soap, const char *tag, int id, const struct fw__getParentEntityDataArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getParentEntityDataArray), type))
		return soap->error;
	if (soap_out_LONG64(soap, "childEntityId", -1, &a->childEntityId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getParentEntityDataArray * SOAP_FMAC4 soap_in_fw__getParentEntityDataArray(struct soap *soap, const char *tag, struct fw__getParentEntityDataArray *a, const char *type)
{
	size_t soap_flag_childEntityId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getParentEntityDataArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getParentEntityDataArray, sizeof(struct fw__getParentEntityDataArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getParentEntityDataArray(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_childEntityId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "childEntityId", &a->childEntityId, "xsd:long"))
				{	soap_flag_childEntityId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getParentEntityDataArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getParentEntityDataArray, 0, sizeof(struct fw__getParentEntityDataArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_childEntityId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getParentEntityDataArray(struct soap *soap, const struct fw__getParentEntityDataArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getParentEntityDataArray);
	if (soap_out_fw__getParentEntityDataArray(soap, tag?tag:"fw:getParentEntityDataArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getParentEntityDataArray * SOAP_FMAC4 soap_get_fw__getParentEntityDataArray(struct soap *soap, struct fw__getParentEntityDataArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getParentEntityDataArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getParentEntityDataArray * SOAP_FMAC2 soap_instantiate_fw__getParentEntityDataArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getParentEntityDataArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getParentEntityDataArray, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getParentEntityDataArray);
		if (size)
			*size = sizeof(struct fw__getParentEntityDataArray);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getParentEntityDataArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getParentEntityDataArray);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getParentEntityDataArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getParentEntityDataArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getParentEntityDataArray %p -> %p\n", q, p));
	*(struct fw__getParentEntityDataArray*)p = *(struct fw__getParentEntityDataArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getParentEntityDataArrayResponse(struct soap *soap, struct fw__getParentEntityDataArrayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getParentEntityDataArrayResponse(struct soap *soap, const struct fw__getParentEntityDataArrayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entityDataArray(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getParentEntityDataArrayResponse(struct soap *soap, const char *tag, int id, const struct fw__getParentEntityDataArrayResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__entityDataArray(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getParentEntityDataArrayResponse * SOAP_FMAC4 soap_in_fw__getParentEntityDataArrayResponse(struct soap *soap, const char *tag, struct fw__getParentEntityDataArrayResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getParentEntityDataArrayResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse, sizeof(struct fw__getParentEntityDataArrayResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getParentEntityDataArrayResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entityDataArray(soap, "return", &a->return_, "fw:entityDataArray"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getParentEntityDataArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse, 0, sizeof(struct fw__getParentEntityDataArrayResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getParentEntityDataArrayResponse(struct soap *soap, const struct fw__getParentEntityDataArrayResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse);
	if (soap_out_fw__getParentEntityDataArrayResponse(soap, tag?tag:"fw:getParentEntityDataArrayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getParentEntityDataArrayResponse * SOAP_FMAC4 soap_get_fw__getParentEntityDataArrayResponse(struct soap *soap, struct fw__getParentEntityDataArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getParentEntityDataArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getParentEntityDataArrayResponse * SOAP_FMAC2 soap_instantiate_fw__getParentEntityDataArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getParentEntityDataArrayResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getParentEntityDataArrayResponse);
		if (size)
			*size = sizeof(struct fw__getParentEntityDataArrayResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getParentEntityDataArrayResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getParentEntityDataArrayResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getParentEntityDataArrayResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getParentEntityDataArrayResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getParentEntityDataArrayResponse %p -> %p\n", q, p));
	*(struct fw__getParentEntityDataArrayResponse*)p = *(struct fw__getParentEntityDataArrayResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__registerClient(struct soap *soap, struct fw__registerClient *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->_port);
	soap_default_std__string(soap, &a->_endpointUrl);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__registerClient(struct soap *soap, const struct fw__registerClient *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->_port, SOAP_TYPE_cds_int);
	soap_embedded(soap, &a->_endpointUrl, SOAP_TYPE_cds_std__string);
	soap_serialize_std__string(soap, &a->_endpointUrl);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__registerClient(struct soap *soap, const char *tag, int id, const struct fw__registerClient *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__registerClient), type))
		return soap->error;
	if (soap_out_int(soap, "port", -1, &a->_port, ""))
		return soap->error;
	if (soap_out_std__string(soap, "endpointUrl", -1, &a->_endpointUrl, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__registerClient * SOAP_FMAC4 soap_in_fw__registerClient(struct soap *soap, const char *tag, struct fw__registerClient *a, const char *type)
{
	size_t soap_flag__port = 1;
	size_t soap_flag__endpointUrl = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__registerClient *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__registerClient, sizeof(struct fw__registerClient), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_fw__registerClient(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__port && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, NULL, &a->_port, "xsd:int"))
				{	soap_flag__port--;
					continue;
				}
			if (soap_flag__endpointUrl && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_endpointUrl, "xsd:string"))
				{	soap_flag__endpointUrl--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__registerClient *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__registerClient, 0, sizeof(struct fw__registerClient), 0, soap_copy_fw__registerClient);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__port > 0 || soap_flag__endpointUrl > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__registerClient(struct soap *soap, const struct fw__registerClient *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__registerClient);
	if (soap_out_fw__registerClient(soap, tag?tag:"fw:registerClient", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__registerClient * SOAP_FMAC4 soap_get_fw__registerClient(struct soap *soap, struct fw__registerClient *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__registerClient(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__registerClient * SOAP_FMAC2 soap_instantiate_fw__registerClient(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__registerClient(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__registerClient, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__registerClient);
		if (size)
			*size = sizeof(struct fw__registerClient);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__registerClient[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__registerClient);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__registerClient*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__registerClient(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__registerClient %p -> %p\n", q, p));
	*(struct fw__registerClient*)p = *(struct fw__registerClient*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__registerClientResponse(struct soap *soap, struct fw__registerClientResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__registerClientResponse(struct soap *soap, const struct fw__registerClientResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__registerClientResponse(struct soap *soap, const char *tag, int id, const struct fw__registerClientResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__registerClientResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__registerClientResponse * SOAP_FMAC4 soap_in_fw__registerClientResponse(struct soap *soap, const char *tag, struct fw__registerClientResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__registerClientResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__registerClientResponse, sizeof(struct fw__registerClientResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__registerClientResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__registerClientResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__registerClientResponse, 0, sizeof(struct fw__registerClientResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__registerClientResponse(struct soap *soap, const struct fw__registerClientResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__registerClientResponse);
	if (soap_out_fw__registerClientResponse(soap, tag?tag:"fw:registerClientResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__registerClientResponse * SOAP_FMAC4 soap_get_fw__registerClientResponse(struct soap *soap, struct fw__registerClientResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__registerClientResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__registerClientResponse * SOAP_FMAC2 soap_instantiate_fw__registerClientResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__registerClientResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__registerClientResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__registerClientResponse);
		if (size)
			*size = sizeof(struct fw__registerClientResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__registerClientResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__registerClientResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__registerClientResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__registerClientResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__registerClientResponse %p -> %p\n", q, p));
	*(struct fw__registerClientResponse*)p = *(struct fw__registerClientResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__reservePort(struct soap *soap, struct fw__reservePort *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->clientName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__reservePort(struct soap *soap, const struct fw__reservePort *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->clientName, SOAP_TYPE_cds_std__string);
	soap_serialize_std__string(soap, &a->clientName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__reservePort(struct soap *soap, const char *tag, int id, const struct fw__reservePort *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__reservePort), type))
		return soap->error;
	if (soap_out_std__string(soap, "clientName", -1, &a->clientName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__reservePort * SOAP_FMAC4 soap_in_fw__reservePort(struct soap *soap, const char *tag, struct fw__reservePort *a, const char *type)
{
	size_t soap_flag_clientName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__reservePort *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__reservePort, sizeof(struct fw__reservePort), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_fw__reservePort(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_clientName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "clientName", &a->clientName, "xsd:string"))
				{	soap_flag_clientName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__reservePort *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__reservePort, 0, sizeof(struct fw__reservePort), 0, soap_copy_fw__reservePort);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_clientName > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__reservePort(struct soap *soap, const struct fw__reservePort *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__reservePort);
	if (soap_out_fw__reservePort(soap, tag?tag:"fw:reservePort", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__reservePort * SOAP_FMAC4 soap_get_fw__reservePort(struct soap *soap, struct fw__reservePort *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__reservePort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__reservePort * SOAP_FMAC2 soap_instantiate_fw__reservePort(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__reservePort(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__reservePort, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__reservePort);
		if (size)
			*size = sizeof(struct fw__reservePort);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__reservePort[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__reservePort);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__reservePort*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__reservePort(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__reservePort %p -> %p\n", q, p));
	*(struct fw__reservePort*)p = *(struct fw__reservePort*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__reservePortResponse(struct soap *soap, struct fw__reservePortResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->return_);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__reservePortResponse(struct soap *soap, const struct fw__reservePortResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->return_, SOAP_TYPE_cds_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__reservePortResponse(struct soap *soap, const char *tag, int id, const struct fw__reservePortResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__reservePortResponse), type))
		return soap->error;
	if (soap_out_int(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__reservePortResponse * SOAP_FMAC4 soap_in_fw__reservePortResponse(struct soap *soap, const char *tag, struct fw__reservePortResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__reservePortResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__reservePortResponse, sizeof(struct fw__reservePortResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__reservePortResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "return", &a->return_, "xsd:int"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__reservePortResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__reservePortResponse, 0, sizeof(struct fw__reservePortResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_ > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__reservePortResponse(struct soap *soap, const struct fw__reservePortResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__reservePortResponse);
	if (soap_out_fw__reservePortResponse(soap, tag?tag:"fw:reservePortResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__reservePortResponse * SOAP_FMAC4 soap_get_fw__reservePortResponse(struct soap *soap, struct fw__reservePortResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__reservePortResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__reservePortResponse * SOAP_FMAC2 soap_instantiate_fw__reservePortResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__reservePortResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__reservePortResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__reservePortResponse);
		if (size)
			*size = sizeof(struct fw__reservePortResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__reservePortResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__reservePortResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__reservePortResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__reservePortResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__reservePortResponse %p -> %p\n", q, p));
	*(struct fw__reservePortResponse*)p = *(struct fw__reservePortResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getCurrentOntology(struct soap *soap, struct fw__getCurrentOntology *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getCurrentOntology(struct soap *soap, const struct fw__getCurrentOntology *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getCurrentOntology(struct soap *soap, const char *tag, int id, const struct fw__getCurrentOntology *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getCurrentOntology), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getCurrentOntology * SOAP_FMAC4 soap_in_fw__getCurrentOntology(struct soap *soap, const char *tag, struct fw__getCurrentOntology *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getCurrentOntology *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getCurrentOntology, sizeof(struct fw__getCurrentOntology), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getCurrentOntology(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getCurrentOntology *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getCurrentOntology, 0, sizeof(struct fw__getCurrentOntology), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getCurrentOntology(struct soap *soap, const struct fw__getCurrentOntology *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getCurrentOntology);
	if (soap_out_fw__getCurrentOntology(soap, tag?tag:"fw:getCurrentOntology", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getCurrentOntology * SOAP_FMAC4 soap_get_fw__getCurrentOntology(struct soap *soap, struct fw__getCurrentOntology *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getCurrentOntology(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getCurrentOntology * SOAP_FMAC2 soap_instantiate_fw__getCurrentOntology(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getCurrentOntology(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getCurrentOntology, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getCurrentOntology);
		if (size)
			*size = sizeof(struct fw__getCurrentOntology);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getCurrentOntology[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getCurrentOntology);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getCurrentOntology*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getCurrentOntology(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getCurrentOntology %p -> %p\n", q, p));
	*(struct fw__getCurrentOntology*)p = *(struct fw__getCurrentOntology*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getCurrentOntologyResponse(struct soap *soap, struct fw__getCurrentOntologyResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getCurrentOntologyResponse(struct soap *soap, const struct fw__getCurrentOntologyResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entity(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getCurrentOntologyResponse(struct soap *soap, const char *tag, int id, const struct fw__getCurrentOntologyResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getCurrentOntologyResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__entity(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getCurrentOntologyResponse * SOAP_FMAC4 soap_in_fw__getCurrentOntologyResponse(struct soap *soap, const char *tag, struct fw__getCurrentOntologyResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getCurrentOntologyResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getCurrentOntologyResponse, sizeof(struct fw__getCurrentOntologyResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getCurrentOntologyResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entity(soap, "return", &a->return_, "fw:entity"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getCurrentOntologyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getCurrentOntologyResponse, 0, sizeof(struct fw__getCurrentOntologyResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getCurrentOntologyResponse(struct soap *soap, const struct fw__getCurrentOntologyResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getCurrentOntologyResponse);
	if (soap_out_fw__getCurrentOntologyResponse(soap, tag?tag:"fw:getCurrentOntologyResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getCurrentOntologyResponse * SOAP_FMAC4 soap_get_fw__getCurrentOntologyResponse(struct soap *soap, struct fw__getCurrentOntologyResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getCurrentOntologyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getCurrentOntologyResponse * SOAP_FMAC2 soap_instantiate_fw__getCurrentOntologyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getCurrentOntologyResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getCurrentOntologyResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getCurrentOntologyResponse);
		if (size)
			*size = sizeof(struct fw__getCurrentOntologyResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getCurrentOntologyResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getCurrentOntologyResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getCurrentOntologyResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getCurrentOntologyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getCurrentOntologyResponse %p -> %p\n", q, p));
	*(struct fw__getCurrentOntologyResponse*)p = *(struct fw__getCurrentOntologyResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getEntityTree(struct soap *soap, struct fw__getEntityTree *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->entityId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getEntityTree(struct soap *soap, const struct fw__getEntityTree *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->entityId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getEntityTree(struct soap *soap, const char *tag, int id, const struct fw__getEntityTree *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getEntityTree), type))
		return soap->error;
	if (soap_out_LONG64(soap, "entityId", -1, &a->entityId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getEntityTree * SOAP_FMAC4 soap_in_fw__getEntityTree(struct soap *soap, const char *tag, struct fw__getEntityTree *a, const char *type)
{
	size_t soap_flag_entityId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getEntityTree *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getEntityTree, sizeof(struct fw__getEntityTree), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getEntityTree(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entityId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "entityId", &a->entityId, "xsd:long"))
				{	soap_flag_entityId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getEntityTree *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getEntityTree, 0, sizeof(struct fw__getEntityTree), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_entityId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getEntityTree(struct soap *soap, const struct fw__getEntityTree *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getEntityTree);
	if (soap_out_fw__getEntityTree(soap, tag?tag:"fw:getEntityTree", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getEntityTree * SOAP_FMAC4 soap_get_fw__getEntityTree(struct soap *soap, struct fw__getEntityTree *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getEntityTree(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getEntityTree * SOAP_FMAC2 soap_instantiate_fw__getEntityTree(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getEntityTree(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getEntityTree, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityTree);
		if (size)
			*size = sizeof(struct fw__getEntityTree);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityTree[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getEntityTree);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getEntityTree*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getEntityTree(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getEntityTree %p -> %p\n", q, p));
	*(struct fw__getEntityTree*)p = *(struct fw__getEntityTree*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getEntityTreeResponse(struct soap *soap, struct fw__getEntityTreeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getEntityTreeResponse(struct soap *soap, const struct fw__getEntityTreeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entity(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getEntityTreeResponse(struct soap *soap, const char *tag, int id, const struct fw__getEntityTreeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getEntityTreeResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__entity(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getEntityTreeResponse * SOAP_FMAC4 soap_in_fw__getEntityTreeResponse(struct soap *soap, const char *tag, struct fw__getEntityTreeResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getEntityTreeResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getEntityTreeResponse, sizeof(struct fw__getEntityTreeResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getEntityTreeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entity(soap, "return", &a->return_, "fw:entity"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getEntityTreeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getEntityTreeResponse, 0, sizeof(struct fw__getEntityTreeResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getEntityTreeResponse(struct soap *soap, const struct fw__getEntityTreeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getEntityTreeResponse);
	if (soap_out_fw__getEntityTreeResponse(soap, tag?tag:"fw:getEntityTreeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getEntityTreeResponse * SOAP_FMAC4 soap_get_fw__getEntityTreeResponse(struct soap *soap, struct fw__getEntityTreeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getEntityTreeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getEntityTreeResponse * SOAP_FMAC2 soap_instantiate_fw__getEntityTreeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getEntityTreeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getEntityTreeResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityTreeResponse);
		if (size)
			*size = sizeof(struct fw__getEntityTreeResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityTreeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getEntityTreeResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getEntityTreeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getEntityTreeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getEntityTreeResponse %p -> %p\n", q, p));
	*(struct fw__getEntityTreeResponse*)p = *(struct fw__getEntityTreeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getEntityById(struct soap *soap, struct fw__getEntityById *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->entityId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getEntityById(struct soap *soap, const struct fw__getEntityById *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->entityId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getEntityById(struct soap *soap, const char *tag, int id, const struct fw__getEntityById *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getEntityById), type))
		return soap->error;
	if (soap_out_LONG64(soap, "entityId", -1, &a->entityId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getEntityById * SOAP_FMAC4 soap_in_fw__getEntityById(struct soap *soap, const char *tag, struct fw__getEntityById *a, const char *type)
{
	size_t soap_flag_entityId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getEntityById *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getEntityById, sizeof(struct fw__getEntityById), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getEntityById(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entityId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "entityId", &a->entityId, "xsd:long"))
				{	soap_flag_entityId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getEntityById *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getEntityById, 0, sizeof(struct fw__getEntityById), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_entityId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getEntityById(struct soap *soap, const struct fw__getEntityById *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getEntityById);
	if (soap_out_fw__getEntityById(soap, tag?tag:"fw:getEntityById", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getEntityById * SOAP_FMAC4 soap_get_fw__getEntityById(struct soap *soap, struct fw__getEntityById *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getEntityById(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getEntityById * SOAP_FMAC2 soap_instantiate_fw__getEntityById(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getEntityById(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getEntityById, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityById);
		if (size)
			*size = sizeof(struct fw__getEntityById);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityById[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getEntityById);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getEntityById*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getEntityById(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getEntityById %p -> %p\n", q, p));
	*(struct fw__getEntityById*)p = *(struct fw__getEntityById*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getEntityByIdResponse(struct soap *soap, struct fw__getEntityByIdResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getEntityByIdResponse(struct soap *soap, const struct fw__getEntityByIdResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entity(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getEntityByIdResponse(struct soap *soap, const char *tag, int id, const struct fw__getEntityByIdResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getEntityByIdResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__entity(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getEntityByIdResponse * SOAP_FMAC4 soap_in_fw__getEntityByIdResponse(struct soap *soap, const char *tag, struct fw__getEntityByIdResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getEntityByIdResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getEntityByIdResponse, sizeof(struct fw__getEntityByIdResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getEntityByIdResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entity(soap, "return", &a->return_, "fw:entity"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getEntityByIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getEntityByIdResponse, 0, sizeof(struct fw__getEntityByIdResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getEntityByIdResponse(struct soap *soap, const struct fw__getEntityByIdResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getEntityByIdResponse);
	if (soap_out_fw__getEntityByIdResponse(soap, tag?tag:"fw:getEntityByIdResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getEntityByIdResponse * SOAP_FMAC4 soap_get_fw__getEntityByIdResponse(struct soap *soap, struct fw__getEntityByIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getEntityByIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getEntityByIdResponse * SOAP_FMAC2 soap_instantiate_fw__getEntityByIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getEntityByIdResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getEntityByIdResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityByIdResponse);
		if (size)
			*size = sizeof(struct fw__getEntityByIdResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityByIdResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getEntityByIdResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getEntityByIdResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getEntityByIdResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getEntityByIdResponse %p -> %p\n", q, p));
	*(struct fw__getEntityByIdResponse*)p = *(struct fw__getEntityByIdResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__entityDataArray(struct soap *soap, fw__entityDataArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__entityDataArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__entityDataArray(struct soap *soap, const char *tag, int id, fw__entityDataArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__entityDataArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 fw__entityDataArray ** SOAP_FMAC4 soap_in_PointerTofw__entityDataArray(struct soap *soap, const char *tag, fw__entityDataArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (fw__entityDataArray **)soap_malloc(soap, sizeof(fw__entityDataArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (fw__entityDataArray *)soap_instantiate_fw__entityDataArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	fw__entityDataArray ** p = (fw__entityDataArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__entityDataArray, sizeof(fw__entityDataArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__entityDataArray(struct soap *soap, fw__entityDataArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__entityDataArray);
	if (soap_out_PointerTofw__entityDataArray(soap, tag?tag:"fw:entityDataArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 fw__entityDataArray ** SOAP_FMAC4 soap_get_PointerTofw__entityDataArray(struct soap *soap, fw__entityDataArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__entityDataArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fw__entity_entityDataSet(struct soap *soap, _fw__entity_entityDataSet *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds__fw__entity_entityDataSet))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fw__entity_entityDataSet(struct soap *soap, const char *tag, int id, _fw__entity_entityDataSet *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds__fw__entity_entityDataSet);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _fw__entity_entityDataSet ** SOAP_FMAC4 soap_in_PointerTo_fw__entity_entityDataSet(struct soap *soap, const char *tag, _fw__entity_entityDataSet **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_fw__entity_entityDataSet **)soap_malloc(soap, sizeof(_fw__entity_entityDataSet *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_fw__entity_entityDataSet *)soap_instantiate__fw__entity_entityDataSet(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_fw__entity_entityDataSet ** p = (_fw__entity_entityDataSet **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds__fw__entity_entityDataSet, sizeof(_fw__entity_entityDataSet), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fw__entity_entityDataSet(struct soap *soap, _fw__entity_entityDataSet *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTo_fw__entity_entityDataSet);
	if (soap_out_PointerTo_fw__entity_entityDataSet(soap, tag?tag:"fw:entity-entityDataSet", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _fw__entity_entityDataSet ** SOAP_FMAC4 soap_get_PointerTo_fw__entity_entityDataSet(struct soap *soap, _fw__entity_entityDataSet **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_fw__entity_entityDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__entityData(struct soap *soap, fw__entityData *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__entityData))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__entityData(struct soap *soap, const char *tag, int id, fw__entityData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__entityData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 fw__entityData ** SOAP_FMAC4 soap_in_PointerTofw__entityData(struct soap *soap, const char *tag, fw__entityData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (fw__entityData **)soap_malloc(soap, sizeof(fw__entityData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (fw__entityData *)soap_instantiate_fw__entityData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	fw__entityData ** p = (fw__entityData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__entityData, sizeof(fw__entityData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__entityData(struct soap *soap, fw__entityData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__entityData);
	if (soap_out_PointerTofw__entityData(soap, tag?tag:"fw:entityData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 fw__entityData ** SOAP_FMAC4 soap_get_PointerTofw__entityData(struct soap *soap, fw__entityData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__entityData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__entityType(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__entityType))
		soap_serialize_fw__entityType(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__entityType(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__entityType);
	if (id < 0)
		return soap->error;
	return soap_out_fw__entityType(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTofw__entityType(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_fw__entityType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__entityType, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__entityType(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__entityType);
	if (soap_out_PointerTofw__entityType(soap, tag?tag:"fw:entityType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTofw__entityType(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__entityType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__entityStatus(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__entityStatus))
		soap_serialize_fw__entityStatus(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__entityStatus(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__entityStatus);
	if (id < 0)
		return soap->error;
	return soap_out_fw__entityStatus(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTofw__entityStatus(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_fw__entityStatus(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__entityStatus, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__entityStatus(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__entityStatus);
	if (soap_out_PointerTofw__entityStatus(soap, tag?tag:"fw:entityStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTofw__entityStatus(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__entityStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap *soap, LONG64 *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap *soap, const char *tag, int id, LONG64 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_LONG64);
	if (id < 0)
		return soap->error;
	return soap_out_LONG64(soap, tag, id, *a, type);
}

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToLONG64(struct soap *soap, const char *tag, LONG64 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (LONG64 **)soap_malloc(soap, sizeof(LONG64 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_LONG64(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (LONG64 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_LONG64, sizeof(LONG64), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap *soap, LONG64 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerToLONG64);
	if (soap_out_PointerToLONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToLONG64(struct soap *soap, LONG64 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_cds_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__user(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__user))
		soap_serialize_fw__user(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__user(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__user);
	if (id < 0)
		return soap->error;
	return soap_out_fw__user(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTofw__user(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_fw__user(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__user, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__user(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__user);
	if (soap_out_PointerTofw__user(soap, tag?tag:"fw:user", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTofw__user(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__user(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__entity(struct soap *soap, fw__entity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__entity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__entity(struct soap *soap, const char *tag, int id, fw__entity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__entity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 fw__entity ** SOAP_FMAC4 soap_in_PointerTofw__entity(struct soap *soap, const char *tag, fw__entity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (fw__entity **)soap_malloc(soap, sizeof(fw__entity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (fw__entity *)soap_instantiate_fw__entity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	fw__entity ** p = (fw__entity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__entity, sizeof(fw__entity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__entity(struct soap *soap, fw__entity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__entity);
	if (soap_out_PointerTofw__entity(soap, tag?tag:"fw:entity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 fw__entity ** SOAP_FMAC4 soap_get_PointerTofw__entity(struct soap *soap, fw__entity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__entity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__entityAttribute(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__entityAttribute))
		soap_serialize_fw__entityAttribute(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__entityAttribute(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__entityAttribute);
	if (id < 0)
		return soap->error;
	return soap_out_fw__entityAttribute(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTofw__entityAttribute(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_fw__entityAttribute(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__entityAttribute, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__entityAttribute(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__entityAttribute);
	if (soap_out_PointerTofw__entityAttribute(soap, tag?tag:"fw:entityAttribute", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTofw__entityAttribute(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__entityAttribute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_cds__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_cds__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_cds_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_cds_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_cds_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofw__entityData(struct soap *soap, std::vector<fw__entityData * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofw__entityData(struct soap *soap, const std::vector<fw__entityData * >*a)
{
	for (std::vector<fw__entityData * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTofw__entityData(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofw__entityData(struct soap *soap, const char *tag, int id, const std::vector<fw__entityData * >*a, const char *type)
{
	for (std::vector<fw__entityData * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTofw__entityData(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<fw__entityData * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofw__entityData(struct soap *soap, const char *tag, std::vector<fw__entityData * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTofw__entityData(soap, -1)))
		return NULL;
	fw__entityData *n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cds_fw__entityData, SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entityData, sizeof(fw__entityData), 1))
				break;
			if (!soap_in_PointerTofw__entityData(soap, tag, NULL, "fw:entityData"))
				break;
		}
		else
		{
			if (!soap_in_PointerTofw__entityData(soap, tag, &n, "fw:entityData"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<fw__entityData * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofw__entityData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTofw__entityData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entityData, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<fw__entityData * >);
		if (size)
			*size = sizeof(std::vector<fw__entityData * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<fw__entityData * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<fw__entityData * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<fw__entityData * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofw__entityData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<fw__entityData * > %p -> %p\n", q, p));
	*(std::vector<fw__entityData * >*)p = *(std::vector<fw__entityData * >*)q;
}

} // namespace cds


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of cdsC.cpp */
