/* cdsConsoleDataServiceProxy.h
   Generated by gSOAP 2.8.3 from cdsModHeader.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef cdsConsoleDataServiceProxy_H
#define cdsConsoleDataServiceProxy_H
#include "cdsH.h"

namespace cds {

class SOAP_CMAC ConsoleDataServiceProxy : public soap
{ public:
	/// Endpoint URL of service 'ConsoleDataServiceProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	ConsoleDataServiceProxy();
	/// Constructor with copy of another engine state
	ConsoleDataServiceProxy(const struct soap&);
	/// Constructor with endpoint URL
	ConsoleDataServiceProxy(const char *url);
	/// Constructor with engine input+output mode control
	ConsoleDataServiceProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	ConsoleDataServiceProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	ConsoleDataServiceProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~ConsoleDataServiceProxy();
	/// Initializer used by constructors
	virtual	void ConsoleDataServiceProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'getEntityById' (returns error code or SOAP_OK)
	virtual	int getEntityById(LONG64 entityId, struct fw__getEntityByIdResponse &_param_1) { return getEntityById(NULL, NULL, entityId, _param_1); }
	virtual	int getEntityById(const char *endpoint, const char *soap_action, LONG64 entityId, struct fw__getEntityByIdResponse &_param_1);

	/// Web service operation 'getEntityTree' (returns error code or SOAP_OK)
	virtual	int getEntityTree(LONG64 entityId, struct fw__getEntityTreeResponse &_param_2) { return getEntityTree(NULL, NULL, entityId, _param_2); }
	virtual	int getEntityTree(const char *endpoint, const char *soap_action, LONG64 entityId, struct fw__getEntityTreeResponse &_param_2);

	/// Web service operation 'getCurrentOntology' (returns error code or SOAP_OK)
	virtual	int getCurrentOntology(struct fw__getCurrentOntologyResponse &_param_3) { return getCurrentOntology(NULL, NULL, _param_3); }
	virtual	int getCurrentOntology(const char *endpoint, const char *soap_action, struct fw__getCurrentOntologyResponse &_param_3);

	/// Web service operation 'reservePort' (returns error code or SOAP_OK)
	virtual	int reservePort(std::string clientName, struct fw__reservePortResponse &_param_4) { return reservePort(NULL, NULL, clientName, _param_4); }
	virtual	int reservePort(const char *endpoint, const char *soap_action, std::string clientName, struct fw__reservePortResponse &_param_4);

	/// Web service operation 'registerClient' (returns error code or SOAP_OK)
	virtual	int registerClient(int _port, std::string _endpointUrl, struct fw__registerClientResponse &_param_5) { return registerClient(NULL, NULL, _port, _endpointUrl, _param_5); }
	virtual	int registerClient(const char *endpoint, const char *soap_action, int _port, std::string _endpointUrl, struct fw__registerClientResponse &_param_5);

	/// Web service operation 'getParentEntityDataArray' (returns error code or SOAP_OK)
	virtual	int getParentEntityDataArray(LONG64 childEntityId, struct fw__getParentEntityDataArrayResponse &_param_6) { return getParentEntityDataArray(NULL, NULL, childEntityId, _param_6); }
	virtual	int getParentEntityDataArray(const char *endpoint, const char *soap_action, LONG64 childEntityId, struct fw__getParentEntityDataArrayResponse &_param_6);
};

} // namespace cds

#endif
