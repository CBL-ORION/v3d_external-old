/* cdsStub.h
   Generated by gSOAP 2.8.3 from cdsModHeader.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef cdsStub_H
#define cdsStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	""
#define SOAP_NAMESPACE_OF_fw	"http://ws.FlyWorkstation.it.janelia.org/"
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "../gsoap2/stdsoap2.h"

namespace cds {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_cds_fw__entityData
#define SOAP_TYPE_cds_fw__entityData (8)
/* fw:entityData */
class SOAP_CMAC fw__entityData
{
public:
	std::string *entityAttribute;	/* optional element of type fw:entityAttribute */
	class fw__entity *childEntity;	/* optional element of type fw:entity */
	std::string *user;	/* optional element of type fw:user */
	std::string *value;	/* optional element of type xsd:string */
	int *orderIndex;	/* optional element of type xsd:int */
	LONG64 *id;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_cds_fw__entityData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         fw__entityData() { fw__entityData::soap_default(NULL); }
	virtual ~fw__entityData() { }
};
#endif

#ifndef SOAP_TYPE_cds__fw__entity_entityDataSet
#define SOAP_TYPE_cds__fw__entity_entityDataSet (26)
/* fw:entity-entityDataSet */
class SOAP_CMAC _fw__entity_entityDataSet
{
public:
	std::vector<fw__entityData * >entityData;	/* optional element of type fw:entityData */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_cds__fw__entity_entityDataSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _fw__entity_entityDataSet() { _fw__entity_entityDataSet::soap_default(NULL); }
	virtual ~_fw__entity_entityDataSet() { }
};
#endif

#ifndef SOAP_TYPE_cds_fw__entity
#define SOAP_TYPE_cds_fw__entity (9)
/* fw:entity */
class SOAP_CMAC fw__entity
{
public:
	std::string *name;	/* optional element of type xsd:string */
	std::string *user;	/* optional element of type fw:user */
	std::string *entityStatus;	/* optional element of type fw:entityStatus */
	std::string *entityType;	/* optional element of type fw:entityType */
	_fw__entity_entityDataSet *entityDataSet;	/* optional element of type fw:entity-entityDataSet */
	LONG64 *id;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_cds_fw__entity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         fw__entity() { fw__entity::soap_default(NULL); }
	virtual ~fw__entity() { }
};
#endif

#ifndef SOAP_TYPE_cds_fw__entityDataArray
#define SOAP_TYPE_cds_fw__entityDataArray (10)
/* fw:entityDataArray */
class SOAP_CMAC fw__entityDataArray
{
public:
	std::vector<fw__entityData * >item;	/* optional element of type fw:entityData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_cds_fw__entityDataArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         fw__entityDataArray() { fw__entityDataArray::soap_default(NULL); }
	virtual ~fw__entityDataArray() { }
};
#endif

#ifndef SOAP_TYPE_cds_fw__getEntityByIdResponse
#define SOAP_TYPE_cds_fw__getEntityByIdResponse (30)
/* fw:getEntityByIdResponse */
struct fw__getEntityByIdResponse
{
public:
	fw__entity *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type fw:entity */
};
#endif

#ifndef SOAP_TYPE_cds_fw__getEntityById
#define SOAP_TYPE_cds_fw__getEntityById (33)
/* fw:getEntityById */
struct fw__getEntityById
{
public:
	LONG64 entityId;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_cds_fw__getEntityTreeResponse
#define SOAP_TYPE_cds_fw__getEntityTreeResponse (34)
/* fw:getEntityTreeResponse */
struct fw__getEntityTreeResponse
{
public:
	fw__entity *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type fw:entity */
};
#endif

#ifndef SOAP_TYPE_cds_fw__getEntityTree
#define SOAP_TYPE_cds_fw__getEntityTree (37)
/* fw:getEntityTree */
struct fw__getEntityTree
{
public:
	LONG64 entityId;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_cds_fw__getCurrentOntologyResponse
#define SOAP_TYPE_cds_fw__getCurrentOntologyResponse (38)
/* fw:getCurrentOntologyResponse */
struct fw__getCurrentOntologyResponse
{
public:
	fw__entity *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type fw:entity */
};
#endif

#ifndef SOAP_TYPE_cds_fw__getCurrentOntology
#define SOAP_TYPE_cds_fw__getCurrentOntology (41)
/* fw:getCurrentOntology */
struct fw__getCurrentOntology
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_cds_fw__reservePortResponse
#define SOAP_TYPE_cds_fw__reservePortResponse (42)
/* fw:reservePortResponse */
struct fw__reservePortResponse
{
public:
	int return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cds_fw__reservePort
#define SOAP_TYPE_cds_fw__reservePort (45)
/* fw:reservePort */
struct fw__reservePort
{
public:
	std::string clientName;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_cds_fw__registerClientResponse
#define SOAP_TYPE_cds_fw__registerClientResponse (46)
/* fw:registerClientResponse */
struct fw__registerClientResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_cds_fw__registerClient
#define SOAP_TYPE_cds_fw__registerClient (49)
/* fw:registerClient */
struct fw__registerClient
{
public:
	int _port;	/* required element of type xsd:int */
	std::string _endpointUrl;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse
#define SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse (50)
/* fw:getParentEntityDataArrayResponse */
struct fw__getParentEntityDataArrayResponse
{
public:
	fw__entityDataArray *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type fw:entityDataArray */
};
#endif

#ifndef SOAP_TYPE_cds_fw__getParentEntityDataArray
#define SOAP_TYPE_cds_fw__getParentEntityDataArray (54)
/* fw:getParentEntityDataArray */
struct fw__getParentEntityDataArray
{
public:
	LONG64 childEntityId;	/* required element of type xsd:long */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_cds_SOAP_ENV__Header
#define SOAP_TYPE_cds_SOAP_ENV__Header (55)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_cds_SOAP_ENV__Code
#define SOAP_TYPE_cds_SOAP_ENV__Code (56)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_cds_SOAP_ENV__Detail
#define SOAP_TYPE_cds_SOAP_ENV__Detail (58)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_cds_SOAP_ENV__Reason
#define SOAP_TYPE_cds_SOAP_ENV__Reason (61)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_cds_SOAP_ENV__Fault
#define SOAP_TYPE_cds_SOAP_ENV__Fault (62)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_cds__QName
#define SOAP_TYPE_cds__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_cds__XML
#define SOAP_TYPE_cds__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_cds_fw__entityAttribute
#define SOAP_TYPE_cds_fw__entityAttribute (12)
typedef std::string fw__entityAttribute;
#endif

#ifndef SOAP_TYPE_cds_fw__user
#define SOAP_TYPE_cds_fw__user (13)
typedef std::string fw__user;
#endif

#ifndef SOAP_TYPE_cds_fw__entityStatus
#define SOAP_TYPE_cds_fw__entityStatus (14)
typedef std::string fw__entityStatus;
#endif

#ifndef SOAP_TYPE_cds_fw__entityType
#define SOAP_TYPE_cds_fw__entityType (15)
typedef std::string fw__entityType;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace cds


#endif

/* End of cdsStub.h */
