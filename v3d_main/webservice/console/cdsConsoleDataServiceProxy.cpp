/* cdsConsoleDataServiceProxy.cpp
   Generated by gSOAP 2.8.3 from cdsModHeader.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "cdsConsoleDataServiceProxy.h"

namespace cds {

ConsoleDataServiceProxy::ConsoleDataServiceProxy()
{	ConsoleDataServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ConsoleDataServiceProxy::ConsoleDataServiceProxy(const struct soap &_soap) : soap(_soap)
{ }

ConsoleDataServiceProxy::ConsoleDataServiceProxy(const char *url)
{	ConsoleDataServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

ConsoleDataServiceProxy::ConsoleDataServiceProxy(soap_mode iomode)
{	ConsoleDataServiceProxy_init(iomode, iomode);
}

ConsoleDataServiceProxy::ConsoleDataServiceProxy(const char *url, soap_mode iomode)
{	ConsoleDataServiceProxy_init(iomode, iomode);
	soap_endpoint = url;
}

ConsoleDataServiceProxy::ConsoleDataServiceProxy(soap_mode imode, soap_mode omode)
{	ConsoleDataServiceProxy_init(imode, omode);
}

ConsoleDataServiceProxy::~ConsoleDataServiceProxy()
{ }

void ConsoleDataServiceProxy::ConsoleDataServiceProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"fw", "http://ws.FlyWorkstation.it.janelia.org/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void ConsoleDataServiceProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void ConsoleDataServiceProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *ConsoleDataServiceProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *ConsoleDataServiceProxy::soap_fault()
{	return this->fault;
}

const char *ConsoleDataServiceProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *ConsoleDataServiceProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int ConsoleDataServiceProxy::soap_close_socket()
{	return soap_closesock(this);
}

void ConsoleDataServiceProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void ConsoleDataServiceProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *ConsoleDataServiceProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int ConsoleDataServiceProxy::getEntityById(const char *endpoint, const char *soap_action, LONG64 entityId, struct fw__getEntityByIdResponse &_param_1)
{	struct soap *soap = this;
	struct fw__getEntityById soap_tmp_fw__getEntityById;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:30001/axis2/services/cds";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_fw__getEntityById.entityId = entityId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_fw__getEntityById(soap, &soap_tmp_fw__getEntityById);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_fw__getEntityById(soap, &soap_tmp_fw__getEntityById, "fw:getEntityById", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_fw__getEntityById(soap, &soap_tmp_fw__getEntityById, "fw:getEntityById", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_1)
		return soap_closesock(soap);
	soap_default_fw__getEntityByIdResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_fw__getEntityByIdResponse(soap, &_param_1, "fw:getEntityByIdResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ConsoleDataServiceProxy::getEntityTree(const char *endpoint, const char *soap_action, LONG64 entityId, struct fw__getEntityTreeResponse &_param_2)
{	struct soap *soap = this;
	struct fw__getEntityTree soap_tmp_fw__getEntityTree;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:30001/axis2/services/cds";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_fw__getEntityTree.entityId = entityId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_fw__getEntityTree(soap, &soap_tmp_fw__getEntityTree);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_fw__getEntityTree(soap, &soap_tmp_fw__getEntityTree, "fw:getEntityTree", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_fw__getEntityTree(soap, &soap_tmp_fw__getEntityTree, "fw:getEntityTree", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_2)
		return soap_closesock(soap);
	soap_default_fw__getEntityTreeResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_fw__getEntityTreeResponse(soap, &_param_2, "fw:getEntityTreeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ConsoleDataServiceProxy::getCurrentOntology(const char *endpoint, const char *soap_action, struct fw__getCurrentOntologyResponse &_param_3)
{	struct soap *soap = this;
	struct fw__getCurrentOntology soap_tmp_fw__getCurrentOntology;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:30001/axis2/services/cds";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_fw__getCurrentOntology(soap, &soap_tmp_fw__getCurrentOntology);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_fw__getCurrentOntology(soap, &soap_tmp_fw__getCurrentOntology, "fw:getCurrentOntology", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_fw__getCurrentOntology(soap, &soap_tmp_fw__getCurrentOntology, "fw:getCurrentOntology", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_3)
		return soap_closesock(soap);
	soap_default_fw__getCurrentOntologyResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_fw__getCurrentOntologyResponse(soap, &_param_3, "fw:getCurrentOntologyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ConsoleDataServiceProxy::reservePort(const char *endpoint, const char *soap_action, std::string clientName, struct fw__reservePortResponse &_param_4)
{	struct soap *soap = this;
	struct fw__reservePort soap_tmp_fw__reservePort;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:30001/axis2/services/cds";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_fw__reservePort.clientName = clientName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_fw__reservePort(soap, &soap_tmp_fw__reservePort);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_fw__reservePort(soap, &soap_tmp_fw__reservePort, "fw:reservePort", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_fw__reservePort(soap, &soap_tmp_fw__reservePort, "fw:reservePort", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_4)
		return soap_closesock(soap);
	soap_default_fw__reservePortResponse(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_fw__reservePortResponse(soap, &_param_4, "fw:reservePortResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ConsoleDataServiceProxy::registerClient(const char *endpoint, const char *soap_action, int _port, std::string _endpointUrl, struct fw__registerClientResponse &_param_5)
{	struct soap *soap = this;
	struct fw__registerClient soap_tmp_fw__registerClient;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:30001/axis2/services/cds";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_fw__registerClient._port = _port;
	soap_tmp_fw__registerClient._endpointUrl = _endpointUrl;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_fw__registerClient(soap, &soap_tmp_fw__registerClient);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_fw__registerClient(soap, &soap_tmp_fw__registerClient, "fw:registerClient", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_fw__registerClient(soap, &soap_tmp_fw__registerClient, "fw:registerClient", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_5)
		return soap_closesock(soap);
	soap_default_fw__registerClientResponse(soap, &_param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_fw__registerClientResponse(soap, &_param_5, "fw:registerClientResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ConsoleDataServiceProxy::getParentEntityDataArray(const char *endpoint, const char *soap_action, LONG64 childEntityId, struct fw__getParentEntityDataArrayResponse &_param_6)
{	struct soap *soap = this;
	struct fw__getParentEntityDataArray soap_tmp_fw__getParentEntityDataArray;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:30001/axis2/services/cds";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_fw__getParentEntityDataArray.childEntityId = childEntityId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_fw__getParentEntityDataArray(soap, &soap_tmp_fw__getParentEntityDataArray);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_fw__getParentEntityDataArray(soap, &soap_tmp_fw__getParentEntityDataArray, "fw:getParentEntityDataArray", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_fw__getParentEntityDataArray(soap, &soap_tmp_fw__getParentEntityDataArray, "fw:getParentEntityDataArray", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_6)
		return soap_closesock(soap);
	soap_default_fw__getParentEntityDataArrayResponse(soap, &_param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_fw__getParentEntityDataArrayResponse(soap, &_param_6, "fw:getParentEntityDataArrayResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

} // namespace cds

/* End of client proxy code */
