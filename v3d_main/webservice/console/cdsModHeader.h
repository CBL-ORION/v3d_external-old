// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* cdsHeader.h
   Generated by wsdl2h 2.8.3 from cds.wsdl and typemap.dat
   2011-08-22 20:16:42 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on cdsHeader.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://ws.FlyWorkstation.it.janelia.org/                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

fw = "http://ws.FlyWorkstation.it.janelia.org/"
ns1 = ""

*/

#define SOAP_NAMESPACE_OF_ns1	""
//gsoap ns1   schema namespace:	
//gsoap ns1   schema form:	unqualified

#define SOAP_NAMESPACE_OF_fw	"http://ws.FlyWorkstation.it.janelia.org/"
//gsoap fw    schema namespace:	http://ws.FlyWorkstation.it.janelia.org/
//gsoap fw    schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class fw__entityData.
class fw__entityData;

//  Forward declaration of class fw__entity.
class fw__entity;

//  Forward declaration of class fw__entityDataArray.
class fw__entityDataArray;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://ws.FlyWorkstation.it.janelia.org/                                 *
 *                                                                            *
\******************************************************************************/


/// "http://ws.FlyWorkstation.it.janelia.org/":entityAttribute is a simpleType restriction of xs:string.
typedef std::string fw__entityAttribute;

/// "http://ws.FlyWorkstation.it.janelia.org/":user is a simpleType restriction of xs:string.
typedef std::string fw__user;

/// "http://ws.FlyWorkstation.it.janelia.org/":entityStatus is a simpleType restriction of xs:string.
typedef std::string fw__entityStatus;

/// "http://ws.FlyWorkstation.it.janelia.org/":entityType is a simpleType restriction of xs:string.
typedef std::string fw__entityType;

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://ws.FlyWorkstation.it.janelia.org/                                 *
 *                                                                            *
\******************************************************************************/


/// "http://ws.FlyWorkstation.it.janelia.org/":entityData is a complexType.
class fw__entityData
{ public:
/// Element entityAttribute of type "http://ws.FlyWorkstation.it.janelia.org/":entityAttribute.
    fw__entityAttribute*                 entityAttribute                0;	///< Optional element.
/// Element childEntity of type "http://ws.FlyWorkstation.it.janelia.org/":entity.
    fw__entity*                          childEntity                    0;	///< Optional element.
/// Element user of type "http://ws.FlyWorkstation.it.janelia.org/":user.
    fw__user*                            user                           0;	///< Optional element.
/// Element value of type xs:string.
    std::string*                         value                          0;	///< Optional element.
/// Element orderIndex of type xs:int.
    int*                                 orderIndex                     0;	///< Optional element.
/// Attribute id of type xs:long.
   @LONG64*                              id                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://ws.FlyWorkstation.it.janelia.org/":entity is a complexType.
class fw__entity
{ public:
/// Element name of type xs:string.
    std::string*                         name                           0;	///< Optional element.
/// Element user of type "http://ws.FlyWorkstation.it.janelia.org/":user.
    fw__user*                            user                           0;	///< Optional element.
/// Element entityStatus of type "http://ws.FlyWorkstation.it.janelia.org/":entityStatus.
    fw__entityStatus*                    entityStatus                   0;	///< Optional element.
/// Element entityType of type "http://ws.FlyWorkstation.it.janelia.org/":entityType.
    fw__entityType*                      entityType                     0;	///< Optional element.
    class _fw__entity_entityDataSet
    {
/// Vector of fw__entityData* with length 0..unbounded
    std::vector<fw__entityData*        > entityData                     0;
    }                                   *entityDataSet                  0;	///< Optional element.
/// Attribute id of type xs:long.
   @LONG64*                              id                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://ws.FlyWorkstation.it.janelia.org/":entityDataArray is a complexType.
class fw__entityDataArray
{ public:
/// Vector of fw__entityData* with length 0..unbounded
    std::vector<fw__entityData*        > item                           0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://ws.FlyWorkstation.it.janelia.org/                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://ws.FlyWorkstation.it.janelia.org/                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap fw   service name:	ConsoleDataService 
//gsoap fw   service type:	ConsoleDataService 
//gsoap fw   service port:	http://localhost:30001/axis2/services/cds 
//gsoap fw   service namespace:	http://ws.FlyWorkstation.it.janelia.org/ 
//gsoap fw   service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage ConsoleDataService Definitions

@section ConsoleDataService_bindings Service Bindings

  - @ref ConsoleDataService

@section ConsoleDataService_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page ConsoleDataService Binding "CdsPortBinding"

@section ConsoleDataService_operations Operations of Binding  "CdsPortBinding"

  - @ref fw__getEntityById

  - @ref fw__getEntityTree

  - @ref fw__getCurrentOntology

  - @ref fw__reservePort

  - @ref fw__registerClient

  - @ref fw__getParentEntityDataArray

@section ConsoleDataService_ports Endpoints of Binding  "CdsPortBinding"

  - http://localhost:30001/axis2/services/cds

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ConsoleDataService                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   fw__getEntityById                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fw__getEntityByIdResponse" of service binding "ConsoleDataService" operation "fw__getEntityById"
struct fw__getEntityByIdResponse
{
    fw__entity*                         return_;
};

/// Operation "fw__getEntityById" of service binding "ConsoleDataService"

/**

Operation details:


  - SOAP RPC literal messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fw__getEntityById(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    LONG64                              entityId,
    // response parameters:
    struct fw__getEntityByIdResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fw__getEntityById(
    struct soap *soap,
    // request parameters:
    LONG64                              entityId,
    // response parameters:
    struct fw__getEntityByIdResponse&
  );
@endcode

C++ proxy class (defined in soapConsoleDataServiceProxy.h):
@code
  class ConsoleDataServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapConsoleDataServiceService.h):
@code
  class ConsoleDataServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap fw   service method-style:	getEntityById rpc
//gsoap fw   service method-encoding:	getEntityById literal
//gsoap fw   service method-action:	getEntityById ""
int fw__getEntityById(
    LONG64                              entityId,	///< Request parameter
    struct fw__getEntityByIdResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   fw__getEntityTree                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fw__getEntityTreeResponse" of service binding "ConsoleDataService" operation "fw__getEntityTree"
struct fw__getEntityTreeResponse
{
    fw__entity*                         return_;
};

/// Operation "fw__getEntityTree" of service binding "ConsoleDataService"

/**

Operation details:


  - SOAP RPC literal messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fw__getEntityTree(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    LONG64                              entityId,
    // response parameters:
    struct fw__getEntityTreeResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fw__getEntityTree(
    struct soap *soap,
    // request parameters:
    LONG64                              entityId,
    // response parameters:
    struct fw__getEntityTreeResponse&
  );
@endcode

C++ proxy class (defined in soapConsoleDataServiceProxy.h):
@code
  class ConsoleDataServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapConsoleDataServiceService.h):
@code
  class ConsoleDataServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap fw   service method-style:	getEntityTree rpc
//gsoap fw   service method-encoding:	getEntityTree literal
//gsoap fw   service method-action:	getEntityTree ""
int fw__getEntityTree(
    LONG64                              entityId,	///< Request parameter
    struct fw__getEntityTreeResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   fw__getCurrentOntology                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fw__getCurrentOntologyResponse" of service binding "ConsoleDataService" operation "fw__getCurrentOntology"
struct fw__getCurrentOntologyResponse
{
    fw__entity*                         return_;
};

/// Operation "fw__getCurrentOntology" of service binding "ConsoleDataService"

/**

Operation details:


  - SOAP RPC literal messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fw__getCurrentOntology(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct fw__getCurrentOntologyResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fw__getCurrentOntology(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct fw__getCurrentOntologyResponse&
  );
@endcode

C++ proxy class (defined in soapConsoleDataServiceProxy.h):
@code
  class ConsoleDataServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapConsoleDataServiceService.h):
@code
  class ConsoleDataServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap fw   service method-style:	getCurrentOntology rpc
//gsoap fw   service method-encoding:	getCurrentOntology literal
//gsoap fw   service method-action:	getCurrentOntology ""
int fw__getCurrentOntology(
    struct fw__getCurrentOntologyResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   fw__reservePort                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fw__reservePortResponse" of service binding "ConsoleDataService" operation "fw__reservePort"
struct fw__reservePortResponse
{
    int                                 return_;
};

/// Operation "fw__reservePort" of service binding "ConsoleDataService"

/**

Operation details:


  - SOAP RPC literal messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fw__reservePort(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         clientName,
    // response parameters:
    struct fw__reservePortResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fw__reservePort(
    struct soap *soap,
    // request parameters:
    std::string                         clientName,
    // response parameters:
    struct fw__reservePortResponse&
  );
@endcode

C++ proxy class (defined in soapConsoleDataServiceProxy.h):
@code
  class ConsoleDataServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapConsoleDataServiceService.h):
@code
  class ConsoleDataServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap fw   service method-style:	reservePort rpc
//gsoap fw   service method-encoding:	reservePort literal
//gsoap fw   service method-action:	reservePort ""
int fw__reservePort(
    std::string                         clientName,	///< Request parameter
    struct fw__reservePortResponse     &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   fw__registerClient                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fw__registerClientResponse" of service binding "ConsoleDataService" operation "fw__registerClient"
struct fw__registerClientResponse
{
};

/// Operation "fw__registerClient" of service binding "ConsoleDataService"

/**

Operation details:


  - SOAP RPC literal messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fw__registerClient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 port,
    std::string                         endpointUrl,
    // response parameters:
    struct fw__registerClientResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fw__registerClient(
    struct soap *soap,
    // request parameters:
    int                                 port,
    std::string                         endpointUrl,
    // response parameters:
    struct fw__registerClientResponse&
  );
@endcode

C++ proxy class (defined in soapConsoleDataServiceProxy.h):
@code
  class ConsoleDataServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapConsoleDataServiceService.h):
@code
  class ConsoleDataServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap fw   service method-style:	registerClient rpc
//gsoap fw   service method-encoding:	registerClient literal
//gsoap fw   service method-action:	registerClient ""
int fw__registerClient(
    int                                 _port,	///< Request parameter
    std::string                         _endpointUrl,	///< Request parameter
    struct fw__registerClientResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   fw__getParentEntityDataArray                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fw__getParentEntityDataArrayResponse" of service binding "ConsoleDataService" operation "fw__getParentEntityDataArray"
struct fw__getParentEntityDataArrayResponse
{
    fw__entityDataArray*                return_;
};

/// Operation "fw__getParentEntityDataArray" of service binding "ConsoleDataService"

/**

Operation details:


  - SOAP RPC literal messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fw__getParentEntityDataArray(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    LONG64                              childEntityId,
    // response parameters:
    struct fw__getParentEntityDataArrayResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fw__getParentEntityDataArray(
    struct soap *soap,
    // request parameters:
    LONG64                              childEntityId,
    // response parameters:
    struct fw__getParentEntityDataArrayResponse&
  );
@endcode

C++ proxy class (defined in soapConsoleDataServiceProxy.h):
@code
  class ConsoleDataServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapConsoleDataServiceService.h):
@code
  class ConsoleDataServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap fw   service method-style:	getParentEntityDataArray rpc
//gsoap fw   service method-encoding:	getParentEntityDataArray literal
//gsoap fw   service method-action:	getParentEntityDataArray ""
int fw__getParentEntityDataArray(
    LONG64                              childEntityId,	///< Request parameter
    struct fw__getParentEntityDataArrayResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema ""

@section fw Top-level root elements of schema "http://ws.FlyWorkstation.it.janelia.org/"

*/

/* End of cdsHeader.h */
