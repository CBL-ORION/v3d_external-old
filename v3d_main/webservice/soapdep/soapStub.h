/* soapStub.h
   Generated by gSOAP 2.8.1 from ../v3dwebserver.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns__LOAD_MSG
#define SOAP_TYPE_ns__LOAD_MSG (8)
/* ns:LOAD-MSG */
class SOAP_CMAC ns__LOAD_MSG
{
public:
	char *image_path;	/* required element of type xsd:string */
	int x;	/* required element of type xsd:int */
	int y;	/* required element of type xsd:int */
	int z;	/* required element of type xsd:int */
	int c;	/* required element of type xsd:int */
	int t;	/* required element of type xsd:int */
	float intensity;	/* optional element of type xsd:float */
	int dt;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns__LOAD_MSG */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__LOAD_MSG(): image_path(NULL), soap(NULL) { ns__LOAD_MSG::soap_default(NULL); }
	virtual ~ns__LOAD_MSG() { }
};
#endif

#ifndef SOAP_TYPE_ns__LOAD_RES
#define SOAP_TYPE_ns__LOAD_RES (11)
/* ns:LOAD-RES */
class SOAP_CMAC ns__LOAD_RES
{
public:
	float loadtime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:float */
	long memorysize;	/* optional element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns__LOAD_RES */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__LOAD_RES(): soap(NULL) { ns__LOAD_RES::soap_default(NULL); }
	virtual ~ns__LOAD_RES() { }
};
#endif

#ifndef SOAP_TYPE_ns__V3DMSG
#define SOAP_TYPE_ns__V3DMSG (13)
/* ns:V3DMSG */
class SOAP_CMAC ns__V3DMSG
{
public:
	char *imageName;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	int xrot;	/* required element of type xsd:int */
	int yrot;	/* required element of type xsd:int */
	int zrot;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns__V3DMSG */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__V3DMSG(): imageName(NULL), soap(NULL) { ns__V3DMSG::soap_default(NULL); }
	virtual ~ns__V3DMSG() { }
};
#endif

#ifndef SOAP_TYPE_ns__V3DMSG_ROTATION
#define SOAP_TYPE_ns__V3DMSG_ROTATION (14)
/* ns:V3DMSG-ROTATION */
class SOAP_CMAC ns__V3DMSG_ROTATION
{
public:
	char *imageName;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	int xrot;	/* required element of type xsd:int */
	int yrot;	/* required element of type xsd:int */
	int zrot;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns__V3DMSG_ROTATION */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__V3DMSG_ROTATION(): imageName(NULL), soap(NULL) { ns__V3DMSG_ROTATION::soap_default(NULL); }
	virtual ~ns__V3DMSG_ROTATION() { }
};
#endif

#ifndef SOAP_TYPE_ns__V3DMSG_ZOOM
#define SOAP_TYPE_ns__V3DMSG_ZOOM (15)
/* ns:V3DMSG-ZOOM */
class SOAP_CMAC ns__V3DMSG_ZOOM
{
public:
	char *imageName;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	float zoom;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns__V3DMSG_ZOOM */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__V3DMSG_ZOOM(): imageName(NULL), soap(NULL) { ns__V3DMSG_ZOOM::soap_default(NULL); }
	virtual ~ns__V3DMSG_ZOOM() { }
};
#endif

#ifndef SOAP_TYPE_ns__V3DMSG_SHIFT
#define SOAP_TYPE_ns__V3DMSG_SHIFT (16)
/* ns:V3DMSG-SHIFT */
class SOAP_CMAC ns__V3DMSG_SHIFT
{
public:
	char *imageName;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	float xshift;	/* required element of type xsd:float */
	float yshift;	/* required element of type xsd:float */
	float zshift;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns__V3DMSG_SHIFT */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__V3DMSG_SHIFT(): imageName(NULL), soap(NULL) { ns__V3DMSG_SHIFT::soap_default(NULL); }
	virtual ~ns__V3DMSG_SHIFT() { }
};
#endif

#ifndef SOAP_TYPE_ns__V3DMSG_PLUGINM
#define SOAP_TYPE_ns__V3DMSG_PLUGINM (17)
/* ns:V3DMSG-PLUGINM */
class SOAP_CMAC ns__V3DMSG_PLUGINM
{
public:
	char *pluginName;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	char *pluginMethod;	/* optional element of type xsd:string */
	char *imageName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns__V3DMSG_PLUGINM */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__V3DMSG_PLUGINM(): pluginName(NULL), pluginMethod(NULL), imageName(NULL), soap(NULL) { ns__V3DMSG_PLUGINM::soap_default(NULL); }
	virtual ~ns__V3DMSG_PLUGINM() { }
};
#endif

#ifndef SOAP_TYPE_ns__helloworldResponse
#define SOAP_TYPE_ns__helloworldResponse (20)
/* ns:helloworldResponse */
struct ns__helloworldResponse
{
public:
	char **response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__helloworld
#define SOAP_TYPE_ns__helloworld (21)
/* ns:helloworld */
struct ns__helloworld
{
public:
	char *name;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__msghandler
#define SOAP_TYPE_ns__msghandler (25)
/* ns:msghandler */
struct ns__msghandler
{
public:
	ns__LOAD_MSG *lm;	/* optional element of type ns:LOAD-MSG */
};
#endif

#ifndef SOAP_TYPE_ns__v3dopenfileResponse
#define SOAP_TYPE_ns__v3dopenfileResponse (27)
/* ns:v3dopenfileResponse */
struct ns__v3dopenfileResponse
{
public:
	char **v3dfn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__v3dopenfile
#define SOAP_TYPE_ns__v3dopenfile (28)
/* ns:v3dopenfile */
struct ns__v3dopenfile
{
public:
	char *fn;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__v3dopenfile3d
#define SOAP_TYPE_ns__v3dopenfile3d (31)
/* ns:v3dopenfile3d */
struct ns__v3dopenfile3d
{
public:
	ns__V3DMSG *input;	/* optional element of type ns:V3DMSG */
};
#endif

#ifndef SOAP_TYPE_ns__v3dopenfile3dwrot
#define SOAP_TYPE_ns__v3dopenfile3dwrot (34)
/* ns:v3dopenfile3dwrot */
struct ns__v3dopenfile3dwrot
{
public:
	ns__V3DMSG_ROTATION *input;	/* optional element of type ns:V3DMSG-ROTATION */
};
#endif

#ifndef SOAP_TYPE_ns__v3dopenfile3dwzoom
#define SOAP_TYPE_ns__v3dopenfile3dwzoom (37)
/* ns:v3dopenfile3dwzoom */
struct ns__v3dopenfile3dwzoom
{
public:
	ns__V3DMSG_ZOOM *input;	/* optional element of type ns:V3DMSG-ZOOM */
};
#endif

#ifndef SOAP_TYPE_ns__v3dopenfile3dwshift
#define SOAP_TYPE_ns__v3dopenfile3dwshift (40)
/* ns:v3dopenfile3dwshift */
struct ns__v3dopenfile3dwshift
{
public:
	ns__V3DMSG_SHIFT *input;	/* optional element of type ns:V3DMSG-SHIFT */
};
#endif

#ifndef SOAP_TYPE_ns__v3dwscallpluginmethod
#define SOAP_TYPE_ns__v3dwscallpluginmethod (43)
/* ns:v3dwscallpluginmethod */
struct ns__v3dwscallpluginmethod
{
public:
	ns__V3DMSG_PLUGINM *input;	/* optional element of type ns:V3DMSG-PLUGINM */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (44)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (45)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (47)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (50)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (51)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (7)
typedef char *xsd__string;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
