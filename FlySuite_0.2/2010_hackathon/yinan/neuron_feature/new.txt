double  computeStep(Segment *t){ 
		if(t->getPid()>0)
			return VOID;
	
		
#define N 30000            /* max# sections in each file */
	
#define LMINMAX 2
#define LMAXMIN 1
#define NCELL 50000        /* max# nonempty lattice cells in Hausdorff analysis */
#define PRT 0            (0, 1, 2, 3) flag specifying amount of console printing
		int prt=0;
	
		int n;
		
		
		
		short **	r1, **r2;
	
		r1=matrix(3,N);
		r2=matrix(3,N);
		for(int j=1;j<3;j++)
			for(int u=1;u<N;u++){
				r1[j][u]=0;
				r2[j][u]=0;
			}
			
			n=fillArray(t, r1,  r2);
			r1[0][0]=6;r2[0][0]=625;
			r1[1][0]=0;r2[1][0]=625;
			r1[2][0]=0;r2[2][0]=0;
			
		
			
			int i,  k, k1, l, m, cnt, dl, lmin, lmax;
			short r[3], rr[3], **cell;
		
			int scale;
			float dr[3], rt[3], total;
			float hd, measure[25], length;
			
			length=0;
			lmin=0;
			lmax=0;
			for (i=1; i<n; i++) for (k=0; k<3; k++)
			{
				lmin += abs(r1[k][i]-r2[k][i]);
				if (lmax<abs(r1[k][i]-r1[k][1])) lmax=abs(r1[k][i]-r1[k][1]);
				if (lmax<abs(r2[k][i]-r1[k][1])) lmax=abs(r2[k][i]-r1[k][1]);
			}
			lmin /= LMINMAX*n;
			lmax /= 2;
			/*------------start with lattice cell >= lmin ------------*/
			if (lmin<1) lmin=1;
			else if (lmin>1)
			{
				lmax /= lmin;
				for (i=1; i<n; i++) for (k=0; k<3; k++)
				{
					r1[k][i] /= lmin;
					r2[k][i] /= lmin;
				}
			}
			if (lmax<=1) return(0.0);
			scale=lmin;
			cnt=0;
			if (prt) printf("lmin=%d  lmax=%d  n=%d\n", lmin, lmax, n);
			/*---------------------------------------------------------------calloc---------*/
			cell=(short **)calloc(3*NCELL, sizeof(short));
			assert(cell!=NULL);
			for (i=0; i<NCELL; i++) cell[i]=(short *)calloc(3,sizeof(short));
			assert(cell[i-1]!=NULL);
			/*-----------------------------------------------------main loop begin----------------------*/
			while (lmax>LMAXMIN)
			{
				for (k=0; k<3; k++) r[k]=r1[k][1];
				m=mark(0, r, cell, scale);
				for (i=1; i<n; i++) if ((r1[0][i]!=r2[0][i]) ||
					(r1[1][i]!=r2[1][i]) ||
					(r1[2][i]!=r2[2][i]))
				{
					if (prt)
					{
						dl=0;
						for (k=0; k<3; k++) dl += (r1[k][i]-r2[k][i])*(r1[k][i]-r2[k][i]);
						length += sqrt(1.0*dl);
					}
					/*-------------------------tracing link-------*/
					total=0.0;
					for (k=0; k<3; k++) total += abs(r2[k][i]-r1[k][i]);
					for (k=0; k<3; k++) 
					{
						r[k]=r1[k][i];
						dr[k]=(r2[k][i]-r[k])/total;
						rt[k]=dr[k];
					}
					m=mark(m, r, cell, scale);
					while((r[0]!=r2[0][i]) ||
						(r[1]!=r2[1][i]) ||
						(r[2]!=r2[2][i]))
					{
						l=0;
						k1=-1;
						for (k=0; k<3; k++) rr[k]=r2[k][i]-r[k];
						for (k=0; k<3; k++)
						{
							if ((rt[k]*rr[k]>0) && (abs(l)<abs(rr[k])))
							{
								l=rr[k];
								k1=k;
							}
						}
						if (prt>1)
							printf("i = %d,  rt = (%.1f %.1f %.1f),  rr = (%d %d %d),  scale = %d\n",
							i, rt[0], rt[1], rt[2], rr[0], rr[1], rr[2], scale);
						assert((k1>=0) && (l!=0));
						if (l>0) 
						{
							r[k1]++;
							rt[k1]--;
						}
						else
						{
							r[k1]--;
							rt[k1]++;
						}
						for (k=0; k<3; k++) rt[k] += dr[k];
						m=mark(m, r, cell, scale);
						if (m>=NCELL) printf("maximal cell number reached\n");
						if (m>=NCELL) exit(1);
					}
				
				}
				if (prt>2)
				{
					printf("cell =");
					for (k=0; k<m; k++)
						printf(" (%d %d %d)", cell[k][0], cell[k][1], cell[k][2]);
					printf("\n");
				}
				/*---------------- output-------------*/
				measure[cnt]=m;
				cnt++;
				if (prt)
				{
					printf("\ncnt=%d  r1= %d %d %d  r= %d %d %d  r2= %d %d %d", 
						cnt, r1[0][i], r1[1][i], r1[2][i], r[0], r[1], r[2], r2[0][i], r2[1][i], r2[2][i]);
					printf("\nm=%d  i=%d  n=%d  lmin=%d  lmax=%d  length=%.1f\n", 
						m, i, n, lmin, lmax, length);
				}
				for (i=1; i<n; i++) for (k=0; k<3; k++)
				{
					r1[k][i] /= 2;
					r2[k][i] /= 2;
				}
				lmax /= 2;
				scale *=2;
			}
			/*-----------------------------main loop end-------------------------*/
			for (i=0; i<NCELL; i++) free(cell[i]);
			free(cell);
			/*-----------------------------computing Hausdorff dimension---------*/
			hd=0;
			for (i=0; i<cnt; i++) hd += (i-0.5*(cnt-1))*log(measure[i]);
			hd *= -12.0/(cnt*(cnt*cnt-1.0))/log(2.0);
			/*-------------------file output---------------------------*/
			
			if (prt)
			{
				printf("%f ", hd);
				for (i=0; i<cnt; i++) printf("\t%.0f", measure[i]);
				printf("\n");
			}
			return(hd);
}

/*********************** mark lattice cell r, keep marked set ordered */
int mark(int m, short r[3], short ** c, int scale)
{
	int i, j, k;
	if (m<=0)
		for (k=0; k<3; k++) c[0][k]=r[k]; /*--initialize the pool of marked cells--*/
		else
		{
			for (i=0; i<m; i++) 
			{
				if (c[i][0]==r[0] &&
					c[i][1]==r[1] &&
					c[i][2]==r[2]) return(m); /*--- already marked ---*/
				if (c[i][0]>=r[0] &&
					c[i][1]>=r[1] &&
					c[i][2]>r[2]) break; /*--- insert into ordered set ---*/
			}
			if (i<m) for (j=m; j>i; j--) for (k=0; k<3; k++) c[j][k]=c[j-1][k];
			for (k=0; k<3; k++) c[i][k]=r[k];
		}
		
		return(m+1);
		
}

}
;
