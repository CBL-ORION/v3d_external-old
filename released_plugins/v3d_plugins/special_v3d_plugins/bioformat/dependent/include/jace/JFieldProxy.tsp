
BEGIN_NAMESPACE( jace )

/**
 * Contains the template specialization prototypes for the template class, ElementProxy.
 *
 * This file is only for internal use of the JACE library.
 *
 */

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JBoolean>::JFieldProxy< ::jace::proxy::types::JBoolean>( jfieldID fieldID_, jvalue value, jobject parent_ );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JBoolean>::JFieldProxy< ::jace::proxy::types::JBoolean>( jfieldID fieldID_, jvalue value, jclass parent_ );

template <>
JACE_API jace::proxy::types::JBoolean& JFieldProxy< ::jace::proxy::types::JBoolean>::operator=( const ::jace::proxy::types::JBoolean& type );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JByte>::JFieldProxy< ::jace::proxy::types::JByte>( jfieldID fieldID_, jvalue value, jobject parent_ );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JByte>::JFieldProxy< ::jace::proxy::types::JByte>( jfieldID fieldID_, jvalue value, jclass parent_ );

template <>
JACE_API jace::proxy::types::JByte& JFieldProxy< ::jace::proxy::types::JByte>::operator=( const ::jace::proxy::types::JByte& type );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JChar>::JFieldProxy< ::jace::proxy::types::JChar>( jfieldID fieldID_, jvalue value, jobject parent_ );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JChar>::JFieldProxy< ::jace::proxy::types::JChar>( jfieldID fieldID_, jvalue value, jclass parent_ );

template <>
JACE_API jace::proxy::types::JChar& JFieldProxy< ::jace::proxy::types::JChar>::operator=( const ::jace::proxy::types::JChar& type );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JShort>::JFieldProxy< ::jace::proxy::types::JShort>( jfieldID fieldID_, jvalue value, jobject parent_ );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JShort>::JFieldProxy< ::jace::proxy::types::JShort>( jfieldID fieldID_, jvalue value, jclass parent_ );

template <>
JACE_API jace::proxy::types::JShort& JFieldProxy< ::jace::proxy::types::JShort>::operator=( const ::jace::proxy::types::JShort& type );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JInt>::JFieldProxy< ::jace::proxy::types::JInt>( jfieldID fieldID_, jvalue value, jobject parent_ );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JInt>::JFieldProxy< ::jace::proxy::types::JInt>( jfieldID fieldID_, jvalue value, jclass parent_ );

template <>
JACE_API jace::proxy::types::JInt& JFieldProxy< ::jace::proxy::types::JInt>::operator=( const ::jace::proxy::types::JInt& type );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JLong>::JFieldProxy< ::jace::proxy::types::JLong>( jfieldID fieldID_, jvalue value, jobject parent_ );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JLong>::JFieldProxy< ::jace::proxy::types::JLong>( jfieldID fieldID_, jvalue value, jclass parent_ );

template <>
JACE_API jace::proxy::types::JLong& JFieldProxy< ::jace::proxy::types::JLong>::operator=( const ::jace::proxy::types::JLong& type );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JFloat>::JFieldProxy< ::jace::proxy::types::JFloat>( jfieldID fieldID_, jvalue value, jobject parent_ );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JFloat>::JFieldProxy< ::jace::proxy::types::JFloat>( jfieldID fieldID_, jvalue value, jclass parent_ );

template <>
JACE_API jace::proxy::types::JFloat& JFieldProxy< ::jace::proxy::types::JFloat>::operator=( const ::jace::proxy::types::JFloat& type );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JDouble>::JFieldProxy< ::jace::proxy::types::JDouble>( jfieldID fieldID_, jvalue value, jobject parent_ );

template <>
JACE_API JFieldProxy< ::jace::proxy::types::JDouble>::JFieldProxy< ::jace::proxy::types::JDouble>( jfieldID fieldID_, jvalue value, jclass parent_ );

template <>
JACE_API jace::proxy::types::JDouble& JFieldProxy< ::jace::proxy::types::JDouble>::operator=( const ::jace::proxy::types::JDouble& type );

END_NAMESPACE( jace )

